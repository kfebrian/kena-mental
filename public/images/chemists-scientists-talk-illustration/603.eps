%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: sincenew-01.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Myst
%%CreationDate: 7/12/2018
%%BoundingBox: 0 0 550 450
%%HiResBoundingBox: 0 0 550 450
%%CropBox: 0 0 550 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">sincenew</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-07-12T13:22:31+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-07-12T13:22:31+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-07-12T13:22:31+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>104</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq5mVVLMQFAqSdgAMVSvTfNPlrVPrP6N1W0vfqZpd+hPHJ6Vagc+JNK0NMIBPJUwgube4QvBIs&#xA;qg0JUgiv0YZRI5qqZFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FUr81aPJrXlnVdIil9CTULSa2SU9FMsZQE07b7+2KsO/Lv8v9E0X6xHaRBIXt/QuI&#xA;aJzbk4ZTJIm8hHAgGuVYJzEie5y9RCIiKZlcWc1rZNBoixwzhgzK29Qfn3+eZsJiUrycnEY157l8&#xA;+Dy3bw6LMtrqkvqfWbhBHWoFI1UuSqBiaswBNBtlOeUIk0dm7Di47TD8tbfzdB5Tt/8AFlw0+sSS&#xA;Su4cJyjjLkIhaM0fYcq9RXj2yALURRZRhQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqx7zLd6kssMWnRxS3YZDBFcMyRM5NTzZFdh8INPhzLwRHCSWEr6Ma/&#xA;LzWLq4sry+uZAVbUXhRwoVUhi24g0X4fj75dlhe3k5mq2IDMNL1K9vNQnpa8NO41juiwq0gPHjwp&#xA;X7O5PbpvmFOBjzLSeHhFc0u85X+oJbpHp0H12RHUy26PGrldwSPUZFqtQdyMRgEx6tmWHLwEnmaT&#xA;nR7h57Pk4I4txUMatSgO5qanfDlx8JryarvdHZUrsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirE/OF3FZSPd1Jkt4hLwVgGP2kHGpAqe1czdMQRR71ECeQJY7&#xA;+VunR3OizWjuxjNxcTeqgIRi7qTx5iveh26jL9TIw3rdllzjLKxyGz0KeeHTrZUjglkCiiRwozk/&#xA;SBT7zmsMrlv1URsPP9VF5F5ohv7/AOuxm6f/AESzjeIQIGTh+9BKlixDEeGbPCfSYgCh16lo/LmR&#xA;4rO3ToP1s80IL+jkKmtSa/MGmYWo+psCYZQl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV5r570NjqGpX8dxwjmSISwBa8nHELXenUDNlp4gxF9L/AEt/53w8&#xA;dVaM/KNf9wFs3HiZEmcj5zmnX2yXaArYdK+51+mnxx4qq7P2s+zVuSwf8wiFv9JY9PrEQY+xLZsd&#xA;H9JcjTi+L+qWR+XQFtpIwa0ev3geHyzH1Q3DixTXMZk7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8y1zWpNT8/yeUEiHpyPEz3YNWXhGLlhxpTYLTrm2hCsH&#xA;H5fscCea8vh1+Oa/8ltYS90+4sREUbTI41Zy1efrvI2woKU9PHtSNEeaOz8vFGv5r0rNS7Bi/nTR&#xA;JtSex9KURusyFagmpWu3UdeWWx1fhCqu3K0o+o+SYeW2D28rE0l5cZI/5SK0++uQOo8XpVNWXDwF&#xA;OMi1OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvIPJFdS&#xA;/N/XL77SW7XRRjXorrbr/wALm51Pp00R31+t1On9Woke63fkZEI9V15AahUgUH/VeQY9q7iK9m85&#xA;PX80ztkv1FfUvbGPxdm/4GjfwyjKLlEOVgNQkUHHd2WneZDYyzLHLqoL2kRO7vGrO6qPEKrN8sMR&#xA;Uz5oyS4sYPdsnmXOM7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FUFrFlqF5ZSW9jqD6bO4ot3FHHK6e6rKHSvzU4qxXyP+WEflO8uryPWr3U7i7QJI14sFAeZdmX&#xA;0Y4vtGleVfbLsmonMASOwaseCECSBuVPyn+Vj+WtXm1C08x6hKlwAJ7OWOzMUlCSOREAk25fsuDh&#xA;zaieSuI8kYsEIXwjmzohuNAaN40yhuYpaeRr1fMMeu33mK/vp4JHktrRxBHaxiSNouPpxxqzBVc8&#xA;eTGh+bVHCLtlxmq6Im28jabH5luPMlzLJf6rLQQSXXF0tUooKWqAKsdeA5NTke5w0i2R4odirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirgagEilex7fdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:d2f4d230-331f-344c-881d-024ca814fc80</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d2f4d230-331f-344c-881d-024ca814fc80</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0b860551-86e5-d542-b45d-58e62f726d80</stRef:instanceID>
            <stRef:documentID>xmp.did:0b860551-86e5-d542-b45d-58e62f726d80</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2c79acb9-4fe9-7041-b2f2-56379ed583b9</stEvt:instanceID>
                  <stEvt:when>2018-07-03T21:36:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d2f4d230-331f-344c-881d-024ca814fc80</stEvt:instanceID>
                  <stEvt:when>2018-07-12T13:22:31+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>550.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
550 450 li
550 0 li
cp
clp
550 450 mo
0 450 li
0 0 li
550 0 li
550 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
367.896 434.49 mo
366.619 434.49 365.354 434.487 364.096 434.482 cv
332.735 434.344 302.741 432.905 302.748 431.31 cv
302.754 429.762 330.523 427.593 360.829 427.593 cv
361.749 427.593 362.668 427.595 363.593 427.599 cv
394.954 427.737 433.666 429.807 433.659 431.402 cv
433.652 432.933 398.455 434.49 367.896 434.49 cv
.858823 .858823 .858823 rgb
f
409.019 391.083 mo
398.789 397.291 li
366.765 314.361 li
386.654 303.761 li
388.351 317.231 li
388.95 322.037 li
389.407 325.638 li
389.63 327.439 390.28 329.168 391.318 330.656 cv
394.435 335.171 401.221 345.765 402.169 353.857 cv
403.426 364.416 409.019 391.083 409.019 391.083 cv
.94902 .74902 .678431 rgb
f
399.717 403.64 mo
397.838 405.946 396.804 408.792 396.561 411.757 cv
396.288 415.086 394.733 420.058 388.844 424.743 cv
385.389 427.492 384.203 430.957 385.009 430.917 cv
394.376 430.448 406.069 421.518 408.432 418.821 cv
412.51 414.165 412.617 406.151 412.617 406.151 cv
416.868 415.479 li
420.173 413.901 li
420.173 413.901 413.537 395.696 409.822 392.912 cv
409.083 392.358 406.767 394.985 406.767 394.985 cv
399.717 403.64 li
cp
.0980392 .0980392 .0980392 rgb
f
407.906 389.458 mo
407.906 389.458 409.758 391.994 409.923 392.796 cv
411.516 400.546 402.389 415.241 394.305 418.65 cv
394.305 418.65 396.172 411.161 396.561 408.007 cv
399.263 386.132 407.906 389.458 407.906 389.458 cv
cp
.94902 .74902 .678431 rgb
f
371.147 322.816 mo
371.15 322.807 li
372.074 319.838 li
372.696 319.789 li
388.564 318.935 li
388.95 322.037 li
371.147 322.816 li
.768627 .615686 .564706 rgb
f
393.373 81.576 mo
393.373 82.446 393.243 83.296 393.003 84.106 cv
392.903 84.446 392.783 84.766 392.643 85.096 cv
390.893 89.196 386.163 92.126 380.593 92.126 cv
373.533 92.126 367.813 87.406 367.813 81.576 cv
367.813 75.746 373.533 71.026 380.593 71.026 cv
381.173 71.026 381.743 71.056 382.303 71.116 cv
382.733 71.166 383.153 71.236 383.573 71.316 cv
385.313 71.656 386.923 72.296 388.303 73.166 cv
388.613 73.356 388.903 73.556 389.193 73.766 cv
390.913 75.056 392.203 76.736 392.863 78.636 cv
392.873 78.636 li
392.953 78.886 393.033 79.136 393.093 79.396 cv
393.283 80.096 393.373 80.826 393.373 81.576 cv
cp
.219608 .219608 .219608 rgb
f
383.573 71.316 mo
379.823 72.926 377.813 76.566 377.793 76.616 cv
377.723 76.736 377.593 76.806 377.463 76.806 cv
377.283 76.766 li
377.103 76.666 377.033 76.436 377.133 76.256 cv
377.153 76.206 378.943 72.996 382.303 71.116 cv
382.733 71.166 383.153 71.236 383.573 71.316 cv
cp
.176471 .176471 .176471 rgb
f
389.193 73.766 mo
383.853 74.476 380.963 79.686 380.933 79.746 cv
380.863 79.866 380.733 79.936 380.603 79.936 cv
380.423 79.896 li
380.243 79.796 380.173 79.566 380.273 79.386 cv
380.313 79.326 383.103 74.296 388.303 73.166 cv
388.613 73.356 388.903 73.556 389.193 73.766 cv
cp
f
393.003 84.106 mo
392.903 84.446 392.783 84.766 392.643 85.096 cv
391.363 85.646 389.863 86.046 388.233 86.046 cv
387.363 86.046 386.453 85.936 385.513 85.666 cv
385.313 85.606 385.203 85.396 385.253 85.206 cv
385.313 85.006 385.523 84.886 385.723 84.946 cv
388.523 85.746 391.073 85.066 393.003 84.106 cv
cp
f
393.093 79.396 mo
391.493 80.546 388.923 81.946 385.883 81.946 cv
385.013 81.946 384.103 81.826 383.163 81.566 cv
382.963 81.506 382.853 81.296 382.903 81.096 cv
382.963 80.896 383.173 80.786 383.373 80.846 cv
387.443 82.006 390.993 80.036 392.863 78.636 cv
392.873 78.636 li
392.953 78.886 393.033 79.136 393.093 79.396 cv
cp
f
310.425 221.156 mo
310.425 224.202 309.283 226.671 307.875 226.671 cv
306.467 226.671 305.326 224.202 305.326 221.156 cv
305.326 218.111 304.584 215.1 305.992 215.1 cv
307.4 215.1 310.425 218.111 310.425 221.156 cv
cp
.321569 .321569 .447059 rgb
f
311.984 224.356 mo
311.984 224.356 308.894 224.996 302.894 225.276 cv
297.804 225.506 294.024 224.846 291.114 223.866 cv
290.234 223.576 289.444 223.256 288.714 222.916 cv
287.614 222.406 286.654 221.866 285.804 221.356 cv
285.794 221.356 li
285.594 221.226 285.404 221.106 285.214 220.986 cv
284.984 220.846 284.904 220.606 284.944 220.366 cv
284.994 220.026 285.284 219.696 285.674 219.656 cv
305.964 217.966 li
305.964 217.966 298.474 218.316 298.474 216.596 cv
298.474 215.486 303.414 215.136 303.414 215.136 cv
309.914 214.976 li
311.984 224.356 li
cp
1 .8 .713726 rgb
f
373.289 315.936 mo
366.735 336.99 li
366.194 338.728 366.077 340.565 366.4 342.355 cv
367.372 347.748 367.98 359.92 366.687 367.968 cv
365.013 378.379 357.362 404.085 357.362 404.085 cv
345.719 404.652 li
350.79 317.356 li
373.289 315.936 li
f
343.853 412.271 mo
341.188 413.594 339.069 415.756 337.621 418.355 cv
335.995 421.273 332.523 425.156 325.224 426.985 cv
320.941 428.058 318.378 430.911 319.177 431.018 cv
327.49 432.129 342.24 431.175 345.506 429.698 cv
351.145 427.146 354.558 419.894 354.558 419.894 cv
354.569 430.146 li
358.231 430.076 li
358.231 430.076 359.722 410.757 357.491 406.685 cv
357.048 405.876 353.852 407.309 353.852 407.309 cv
343.853 412.271 li
cp
.0980392 .0980392 .0980392 rgb
f
357.176 402.748 mo
357.176 402.748 357.673 405.887 357.491 406.685 cv
355.734 414.4 341.485 423.938 332.716 423.697 cv
332.716 423.697 340.135 415.693 341.39 412.773 cv
350.765 390.961 357.176 402.748 357.176 402.748 cv
cp
1 .8 .713726 rgb
f
330.702 85.404 mo
330.702 92.0148 322.745 97.374 312.929 97.374 cv
303.113 97.374 295.156 92.0148 295.156 85.404 cv
295.156 78.7932 303.113 75.5023 312.929 75.5023 cv
322.745 75.5023 330.702 78.7932 330.702 85.404 cv
cp
.768627 .72549 1 rgb
f
324.036 90.4606 mo
324.036 90.4606 327.885 96.053 329.895 99.2127 cv
330.21 99.7086 329.801 100.345 329.217 100.278 cv
323.917 99.6688 308.537 97.8066 305.986 96.4259 cv
302.267 94.4137 323.445 87.996 324.036 90.4606 cv
cp
f
305.247 85.3441 mo
305.247 86.7725 304.504 87.9305 303.589 87.9305 cv
302.673 87.9305 301.931 86.7725 301.931 85.3441 cv
301.931 83.9157 302.673 82.7578 303.589 82.7578 cv
304.504 82.7578 305.247 83.9157 305.247 85.3441 cv
cp
.576471 .576471 .8 rgb
f
314.161 85.3441 mo
314.161 86.7725 313.418 87.9305 312.503 87.9305 cv
311.587 87.9305 310.845 86.7725 310.845 85.3441 cv
310.845 83.9157 311.587 82.7578 312.503 82.7578 cv
313.418 82.7578 314.161 83.9157 314.161 85.3441 cv
cp
f
323.556 85.3441 mo
323.556 86.7725 322.814 87.9305 321.898 87.9305 cv
320.983 87.9305 320.241 86.7725 320.241 85.3441 cv
320.241 83.9157 320.983 82.7578 321.898 82.7578 cv
322.814 82.7578 323.556 83.9157 323.556 85.3441 cv
cp
f
388.283 91.066 mo
388.283 93.036 387.933 94.926 387.283 96.666 cv
387.183 96.936 387.083 97.186 386.973 97.446 cv
386.583 98.336 386.113 99.196 385.583 99.996 cv
385.443 100.206 385.303 100.406 385.153 100.606 cv
385.143 100.616 li
385.003 100.816 384.853 101.006 384.683 101.206 cv
381.743 104.866 377.213 107.206 372.143 107.206 cv
363.233 107.206 356.003 99.976 356.003 91.066 cv
356.003 82.156 363.233 74.926 372.143 74.926 cv
381.053 74.926 388.283 82.156 388.283 91.066 cv
cp
.286275 .286275 .278431 rgb
f
351.167 321.499 mo
384.657 318.839 li
386.733 302.672 li
377.824 257.339 li
377.157 219.165 li
341.603 227.71 li
349.908 312.978 li
351.167 321.499 li
.741176 .47451 .776471 rgb
f
386.733 226.308 mo
386.733 240.903 374.901 252.735 360.305 252.735 cv
345.71 252.735 340.114 240.683 340.114 226.088 cv
340.114 211.492 345.71 199.881 360.305 199.881 cv
374.901 199.881 386.733 211.712 386.733 226.308 cv
f
363.69 200.231 mo
372.693 319.789 li
402.761 318.171 li
402.761 318.171 401.301 261.754 389.301 216.578 cv
387.396 209.408 374.928 182.428 363.69 200.231 cv
.843137 .843137 1 rgb
f
348.62 207.796 mo
351.167 321.499 li
339.812 322.168 li
340.053 212.989 li
340.053 212.989 335.12 190.38 348.62 207.796 cv
f
358.624 128.577 mo
359.77 126.066 360.841 122.253 359.972 117.712 cv
359.695 116.268 359.223 114.75 358.494 113.177 cv
358.494 113.177 373.381 97.8224 375.041 101.182 cv
375.041 101.182 373.094 122.107 375.624 128.277 cv
375.714 128.487 375.804 128.687 375.894 128.857 cv
376.144 129.347 376.424 129.697 376.714 129.877 cv
356.694 131.837 li
356.694 131.837 357.684 130.647 358.624 128.577 cv
1 .8 .713726 rgb
f
360.239 119.73 mo
359.972 117.712 li
359.972 117.712 li
360.103 118.401 360.191 119.073 360.24 119.727 cv
360.239 119.728 360.239 119.729 360.239 119.73 cv
.721569 .717647 .717647 rgb
f
360.24 119.727 mo
360.191 119.073 360.103 118.401 359.972 117.712 cv
359.972 117.712 368.611 113.163 369.016 113.163 cv
369.026 113.163 369.031 113.166 369.031 113.171 cv
369.031 115.743 360.295 119.475 360.24 119.727 cv
.721569 .588235 .533333 rgb
f
371.638 111.295 mo
366.49 116.302 362.025 117.696 358.427 117.859 cv
354.644 118.032 351.614 116.769 350.199 111.793 cv
347.752 103.187 349.039 96.359 351.11 91.2648 cv
351.229 90.9722 351.348 90.6796 351.478 90.3869 cv
355.814 80.7081 364.452 77.2831 364.452 77.2831 cv
393.044 80.1337 382.476 100.727 371.638 111.295 cv
cp
1 .8 .713726 rgb
f
389.164 137.477 mo
387.604 134.647 385.784 132.607 384.004 131.127 cv
383.984 131.117 li
382.774 130.127 381.594 129.397 380.544 128.857 cv
378.214 127.677 375.894 128.857 375.894 128.857 cv
356.694 131.837 li
355.254 129.373 li
354.778 129.537 354.276 129.702 353.799 129.895 cv
352.655 130.356 351.744 131.064 351.204 131.697 cv
351.194 131.697 li
347.064 136.537 345.944 142.567 345.724 147.367 cv
342.824 210.757 li
367.314 209.527 li
380.134 208.877 li
380.134 208.877 398.334 154.137 389.164 137.477 cv
.741176 .47451 .776471 rgb
f
378.633 102.696 mo
376.433 103.406 369.653 96.856 367.033 91.066 cv
364.423 85.306 364.733 80.356 364.733 80.356 cv
364.733 80.356 356.063 87.446 352.993 87.626 cv
352.073 87.676 351.593 87.216 351.433 86.476 cv
351.373 86.236 351.343 85.976 351.353 85.696 cv
351.363 83.886 352.423 81.266 353.353 79.796 cv
356.283 75.186 361.663 71.366 368.303 71.046 cv
382.213 70.386 386.413 83.526 387.803 87.136 cv
389.183 90.746 380.833 101.986 378.633 102.696 cv
cp
.286275 .286275 .278431 rgb
f
344.775 192.351 mo
351.205 131.694 li
351.205 131.694 348.834 133.097 344.801 138.377 cv
342 142.044 337.997 155.441 337.488 163.579 cv
336.988 171.576 335.74 182.346 334.615 191.118 cv
338.015 191.455 341.406 191.84 344.775 192.351 cv
cp
.843137 .843137 1 rgb
f
332.989 187.171 mo
331.917 195.46 330.864 201.921 330.864 201.921 cv
330.864 201.921 311.494 212.001 306.28 215.028 cv
306.28 215.028 308.323 215.504 309.156 219.421 cv
310.271 224.664 308.114 226.671 308.114 226.671 cv
342.425 214.517 li
344.669 193.346 li
341.294 192.831 336.396 187.509 332.989 187.171 cv
cp
.709804 .709804 .898039 rgb
f
322.444 169.104 mo
353.905 157.226 li
354.227 157.105 354.587 157.269 354.705 157.593 cv
371.324 203.005 li
338.739 214.517 li
322.082 169.899 li
321.963 169.58 322.125 169.224 322.444 169.104 cv
.960784 .960784 1 rgb
f
363.782 177.52 mo
328.729 190.327 li
341.419 220.48 li
373.781 209.379 li
366.427 192.134 li
363.782 177.52 li
.254902 .513726 .768627 rgb
f
374.658 124.834 mo
371.858 124.634 369.434 127.937 366.284 128.087 cv
363.334 128.227 361.296 125.329 359.474 126.347 cv
357.967 127.189 355.281 129.236 353.799 129.895 cv
353.78 129.898 li
353.292 132.992 351.834 144.232 358.49 144.952 cv
364.86 145.652 376.744 132.867 380.544 128.857 cv
378.214 127.677 374.748 125.044 374.658 124.834 cv
cp
1 .8 .713726 rgb
f
385.653 192.436 mo
383.153 201.206 384.583 205.706 384.583 205.706 cv
366.923 207.796 li
366.923 207.796 365.663 202.916 364.723 195.326 cv
363.953 189.256 363.393 181.446 363.833 173.006 cv
365.093 148.666 381.343 131.086 382.353 130.006 cv
382.403 129.956 li
382.403 129.956 388.603 133.426 391.643 140.506 cv
395.733 150.006 388.153 183.676 385.653 192.436 cv
cp
.843137 .843137 1 rgb
f
329.257 174.092 mo
329.054 174.092 328.862 173.968 328.788 173.766 cv
328.692 173.508 328.824 173.219 329.083 173.124 cv
350.798 165.076 li
351.058 164.978 351.345 165.112 351.44 165.371 cv
351.536 165.63 351.404 165.918 351.145 166.013 cv
329.431 174.061 li
329.257 174.092 li
cp
.729412 .729412 .886275 rgb
f
330.609 178.256 mo
330.406 178.256 330.215 178.131 330.141 177.929 cv
330.045 177.671 330.177 177.383 330.435 177.287 cv
352.591 169.076 li
352.85 168.98 353.139 169.112 353.233 169.371 cv
353.329 169.63 353.197 169.918 352.938 170.013 cv
330.783 178.224 li
330.609 178.256 li
cp
f
332.042 182.361 mo
331.839 182.361 331.647 182.237 331.573 182.035 cv
331.477 181.776 331.609 181.488 331.868 181.392 cv
354.023 173.181 li
354.285 173.085 354.571 173.217 354.666 173.476 cv
354.762 173.735 354.63 174.023 354.371 174.119 cv
332.216 182.33 li
332.042 182.361 li
cp
f
333.592 186.466 mo
333.389 186.466 333.197 186.342 333.123 186.14 cv
333.027 185.881 333.159 185.593 333.418 185.497 cv
355.573 177.287 li
355.834 177.189 356.12 177.323 356.216 177.582 cv
356.311 177.841 356.18 178.129 355.921 178.224 cv
333.766 186.435 li
333.592 186.466 li
cp
f
367.714 97.4195 mo
368.21 97.6268 366.825 95.9019 362.873 94.3686 cv
361.69 93.9099 360.629 93.6091 359.928 93.7798 cv
359.382 93.913 359.324 94.9694 360.718 95.1829 cv
362.272 95.421 365.661 96.5616 367.714 97.4195 cv
cp
.207843 .207843 .207843 rgb
f
353.689 92.6739 mo
353.05 92.2837 352.161 91.7526 351.11 91.2648 cv
351.229 90.9722 351.348 90.6796 351.478 90.3869 cv
351.922 90.5062 352.399 90.6579 352.909 90.8313 cv
354.101 91.2432 355.109 91.6984 355.532 92.2837 cv
355.857 92.7389 354.892 93.4109 353.689 92.6739 cv
cp
f
362.64 98.4622 mo
362.646 99.3236 362.215 100.025 361.677 100.03 cv
361.139 100.034 360.697 99.3388 360.69 98.4775 cv
360.684 97.616 361.115 96.9143 361.653 96.9101 cv
362.191 96.9059 362.633 97.6007 362.64 98.4622 cv
cp
.2 .2 .2 rgb
f
364.731 97.6783 mo
361.121 96.4509 li
360.76 97.88 li
364.611 98.0875 li
364.731 97.6783 li
cp
f
352.251 95.0205 mo
352.258 95.882 351.827 96.5837 351.288 96.5879 cv
350.75 96.592 350.308 95.8971 350.302 95.0358 cv
350.295 94.1744 350.726 93.4727 351.264 93.4684 cv
351.802 93.4642 352.244 94.1591 352.251 95.0205 cv
cp
f
353.762 94.0157 mo
350.733 93.0092 li
350.372 94.4384 li
354.222 94.6458 li
353.762 94.0157 li
cp
f
353.976 108.511 mo
352.826 108.251 352.073 108.024 351.673 107.892 cv
351.497 107.834 351.325 107.969 351.337 108.154 cv
351.388 108.987 351.671 110.92 353.177 111.342 cv
356.341 112.226 357.491 110.208 357.818 109.396 cv
357.882 109.235 357.778 109.062 357.606 109.043 cv
356.863 108.961 355.008 108.744 353.976 108.511 cv
cp
.968627 .968627 .968627 rgb
f
350.631 91.0183 mo
349.102 91.0183 347.653 92.6477 347.31 94.841 cv
346.943 97.1921 347.984 99.3142 349.63 99.571 cv
350.397 99.694 351.195 99.3825 351.878 98.7023 cv
352.6 97.9807 353.099 96.9406 353.281 95.7741 cv
353.464 94.6076 353.307 93.465 352.838 92.5573 cv
352.395 91.7014 351.729 91.1638 350.962 91.0441 cv
350.851 91.0266 350.741 91.0183 350.631 91.0183 cv
cp
349.963 100.597 mo
349.801 100.597 349.638 100.585 349.475 100.559 cv
347.285 100.217 345.87 97.5827 346.322 94.6867 cv
346.775 91.7912 348.913 89.7121 351.116 90.0559 cv
352.207 90.2263 353.135 90.9519 353.726 92.0988 cv
354.292 93.1936 354.484 94.5539 354.269 95.9284 cv
354.055 97.3034 353.456 98.5397 352.584 99.4099 cv
351.807 100.186 350.891 100.597 349.963 100.597 cv
cp
.741176 .47451 .776471 rgb
f
361.339 93.4968 mo
359.811 93.4968 358.362 95.1262 358.019 97.3195 cv
357.652 99.6706 358.693 101.793 360.338 102.05 cv
361.106 102.173 361.904 101.861 362.586 101.181 cv
363.309 100.459 363.808 99.4191 363.99 98.2526 cv
364.172 97.0861 364.015 95.9436 363.546 95.0358 cv
363.104 94.1799 362.438 93.6423 361.67 93.5227 cv
361.56 93.5051 361.449 93.4968 361.339 93.4968 cv
cp
360.671 103.075 mo
360.509 103.075 360.346 103.063 360.184 103.038 cv
357.993 102.696 356.578 100.061 357.031 97.1652 cv
357.484 94.2697 359.621 92.1906 361.824 92.5344 cv
362.915 92.7048 363.843 93.4304 364.435 94.5773 cv
365 95.6721 365.193 97.0324 364.978 98.4069 cv
364.763 99.7819 364.164 101.018 363.292 101.888 cv
362.515 102.664 361.599 103.075 360.671 103.075 cv
cp
f
357.33 96.9553 mo
357.164 96.9553 357.002 96.8723 356.907 96.7214 cv
355.934 95.1691 354.147 95.9768 354.072 96.0124 cv
353.824 96.1296 353.525 96.0217 353.408 95.7702 cv
353.29 95.5202 353.399 95.2229 353.65 95.1062 cv
354.566 94.6794 356.602 94.3557 357.754 96.1892 cv
357.901 96.423 357.83 96.7316 357.596 96.8786 cv
357.514 96.9304 357.422 96.9553 357.33 96.9553 cv
cp
f
353.364 104.438 mo
353.246 104.409 li
350.422 102.902 li
350.335 102.855 350.284 102.762 350.291 102.664 cv
350.298 102.565 350.361 102.48 350.454 102.446 cv
353.219 101.429 353.948 98.4431 353.956 98.4133 cv
353.987 98.2795 354.126 98.1965 354.256 98.2268 cv
354.391 98.258 354.474 98.3923 354.442 98.5266 cv
354.413 98.6521 353.733 101.456 351.12 102.707 cv
353.482 103.967 li
353.603 104.032 353.649 104.184 353.585 104.306 cv
353.364 104.438 li
cp
.866667 .654902 .580392 rgb
f
381.552 168.359 mo
378.135 191.881 li
367.285 194.775 li
371.666 192.505 li
374.725 190.921 376.83 187.955 377.315 184.544 cv
379.448 169.568 li
381.552 168.359 li
cp
.729412 .729412 .886275 rgb
f
380.478 102.338 mo
380.265 102.27 li
370.23 95.2897 370.756 88.9411 370.783 88.6745 cv
370.804 88.4685 370.996 88.3186 371.193 88.34 cv
371.398 88.3605 371.549 88.5437 371.529 88.7492 cv
371.523 88.8107 371.058 94.9519 380.692 101.655 cv
380.862 101.773 380.904 102.007 380.786 102.177 cv
380.714 102.281 380.597 102.338 380.478 102.338 cv
cp
.176471 .176471 .176471 rgb
f
385.583 99.996 mo
385.443 100.206 385.303 100.406 385.153 100.606 cv
385.143 100.616 li
377.563 95.346 376.753 90.666 376.723 90.446 cv
376.683 90.236 376.823 90.046 377.033 90.016 cv
377.243 89.976 377.423 90.126 377.463 90.326 cv
377.473 90.376 378.283 94.916 385.583 99.996 cv
cp
f
377.226 100.68 mo
375.007 101.823 366.783 109.936 368.552 111.247 cv
372.5 114.175 380.567 108.751 383.286 104.199 cv
386.004 99.6466 378.821 99.8589 377.226 100.68 cv
cp
1 .8 .713726 rgb
f
381.549 104.563 mo
381.452 104.55 li
381.252 104.497 381.133 104.291 381.186 104.091 cv
381.315 103.609 381.274 103.239 381.059 102.964 cv
380.653 102.44 379.665 102.343 379.327 102.338 cv
379.152 102.325 378.95 102.174 378.947 101.967 cv
378.945 101.76 379.11 101.591 379.316 101.588 cv
379.38 101.597 380.93 101.575 381.65 102.501 cv
382.016 102.969 382.102 103.57 381.911 104.285 cv
381.866 104.453 381.715 104.563 381.549 104.563 cv
cp
.866667 .654902 .580392 rgb
f
387.283 96.666 mo
387.183 96.936 387.083 97.186 386.973 97.446 cv
385.613 96.066 384.063 94.076 382.513 91.246 cv
382.413 91.066 382.483 90.836 382.663 90.736 cv
382.843 90.636 383.073 90.706 383.173 90.886 cv
384.593 93.486 386.013 95.346 387.283 96.666 cv
cp
.176471 .176471 .176471 rgb
f
358.593 80.426 mo
358.393 80.916 354.593 85.356 351.433 86.476 cv
351.373 86.236 351.343 85.976 351.353 85.696 cv
354.223 84.586 357.673 80.536 357.903 80.136 cv
357.973 79.936 358.193 79.856 358.383 79.936 cv
358.573 80.006 358.663 80.236 358.593 80.426 cv
cp
f
386.622 231.793 mo
386.428 231.809 li
373.75 234.006 li
372.989 234.137 372.477 234.864 372.609 235.625 cv
375.467 252.129 li
375.863 254.407 378.039 255.932 380.316 255.546 cv
387.229 254.348 li
389.508 253.953 391.041 251.778 390.646 249.499 cv
387.743 232.736 li
387.647 232.183 387.165 231.793 386.622 231.793 cv
cp
379.589 256.608 mo
378.528 256.608 377.494 256.283 376.608 255.659 cv
375.474 254.859 374.72 253.667 374.482 252.3 cv
371.624 235.796 li
371.398 234.491 372.275 233.246 373.58 233.02 cv
386.258 230.824 li
387.416 230.625 388.526 231.405 388.727 232.565 cv
391.631 249.329 li
391.868 250.696 391.558 252.073 390.759 253.208 cv
389.96 254.342 388.766 255.096 387.399 255.333 cv
380.487 256.53 li
380.187 256.583 379.888 256.608 379.589 256.608 cv
cp
.729412 .729412 .886275 rgb
f
372.886 240.66 mo
372.642 240.66 372.43 240.482 372.392 240.234 cv
372.351 239.962 372.539 239.707 372.812 239.666 cv
389.039 237.225 li
389.309 237.186 389.566 237.372 389.607 237.645 cv
389.648 237.918 389.461 238.173 389.187 238.214 cv
372.961 240.654 li
372.886 240.66 li
cp
f
351.205 131.694 mo
351.205 131.694 349.198 133.004 348.156 134.192 cv
347.891 134.495 347.406 135.092 346.956 135.653 cv
346.286 136.49 345.896 137.515 345.84 138.585 cv
344.669 160.828 li
348.231 159.746 li
351.205 131.694 li
cp
.937255 .937255 .937255 rgb
f
382.403 129.956 mo
382.403 129.956 385.509 131.811 386.131 132.806 cv
388.854 137.162 382.81 145.166 379.087 148.706 cv
375.508 152.109 371.497 157.026 370.49 162.641 cv
368.645 172.917 363.943 179.296 363.943 179.296 cv
368.853 179.926 li
368.313 194.776 li
364.723 195.326 li
363.953 189.256 363.393 181.446 363.833 173.006 cv
365.093 148.666 381.343 131.086 382.353 130.006 cv
382.403 129.956 li
cp
f
373.92 159.869 mo
363.703 158.403 li
362.648 158.252 361.915 157.274 362.066 156.218 cv
362.599 152.501 li
362.751 151.445 363.729 150.712 364.785 150.864 cv
375.002 152.329 li
376.057 152.481 376.79 153.459 376.639 154.515 cv
376.106 158.232 li
375.954 159.287 374.976 160.02 373.92 159.869 cv
cp
.254902 .513726 .768627 rgb
f
374.534 158.907 mo
363.379 157.364 li
363.789 154.392 li
374.944 155.935 li
374.534 158.907 li
cp
.227451 .227451 .227451 rgb
f
371.15 322.807 mo
372.074 319.838 li
372.074 319.838 li
371.15 322.807 li
.631373 .513725 .478431 rgb
f
350.402 324.043 mo
350.548 321.536 li
351.167 321.499 li
372.074 319.838 li
371.15 322.807 li
350.402 324.043 li
.807843 .654902 .588235 rgb
f
351.167 321.499 mo
351.167 321.499 li
351.167 321.481 li
372.074 319.838 li
372.074 319.838 li
351.167 321.499 li
.611765 .407843 .639216 rgb
f
350.548 321.536 mo
350.548 321.53 li
351.167 321.481 li
351.167 321.499 li
350.548 321.536 li
.690196 .690196 .807843 rgb
f
385.751 207.849 mo
385.736 207.818 385.719 207.785 385.703 207.754 cv
385.798 207.701 385.894 207.647 385.988 207.592 cv
385.988 207.592 385.908 207.685 385.751 207.849 cv
.721569 .717647 .717647 rgb
f
364.701 213.654 mo
363.772 213.597 362.838 213.528 361.911 213.451 cv
364.615 212.523 li
364.701 213.654 li
.552941 .376471 .572549 rgb
f
369.684 213.82 mo
368.091 213.82 366.405 213.758 364.701 213.654 cv
364.615 212.523 li
369.948 210.694 li
370.367 210.706 370.826 210.713 371.317 210.713 cv
375.227 210.713 381.21 210.24 385.703 207.754 cv
385.719 207.785 385.736 207.818 385.751 207.849 cv
384.785 208.861 380.921 212.56 375.246 213.463 cv
373.655 213.716 371.746 213.82 369.684 213.82 cv
.619608 .615686 .717647 rgb
f
361.911 213.451 mo
354.284 212.809 347.116 211.557 347.116 211.557 cv
347.51 208.836 li
367.285 210.533 li
367.285 210.533 368.313 210.647 369.948 210.694 cv
364.615 212.523 li
361.911 213.451 li
.235294 .403922 .568627 rgb
f
346.552 207.796 mo
347.519 211.107 351.324 209.837 351.324 209.837 cv
352.739 206.515 li
352.739 206.515 346.175 206.506 346.552 207.796 cv
cp
.321569 .321569 .447059 rgb
f
343.851 200.508 mo
343.851 200.508 333.99 204.297 334.615 208.172 cv
335.24 212.047 339.406 217.963 340.239 217.546 cv
343.707 215.812 348.613 209.837 348.613 209.837 cv
348.613 209.837 348.736 205.349 347.948 204.004 cv
346.114 200.879 343.851 200.508 343.851 200.508 cv
cp
1 .8 .713726 rgb
f
348.364 209.879 mo
354.198 207.338 li
354.198 207.338 353.036 201.501 351.645 200.508 cv
350.079 199.39 343.851 200.508 343.851 200.508 cv
348.364 209.879 li
cp
f
390.883 201.326 mo
389.643 206.346 383.523 210.706 373.573 210.706 cv
350.653 210.076 li
350.653 210.076 352.303 205.076 349.273 202.046 cv
347.973 200.746 343.853 200.506 343.853 200.506 cv
377.123 192.126 li
378.133 191.876 li
378.143 191.476 li
379.323 160.006 li
379.323 160.006 389.083 135.126 391.913 140.946 cv
394.993 147.286 394.223 187.766 390.883 201.326 cv
cp
.843137 .843137 1 rgb
f
334.765 208.919 mo
334.765 208.919 336.304 208.019 336.823 208.154 cv
337.027 208.207 337.074 208.448 337.019 208.577 cv
336.783 209.132 335.058 209.872 335.058 209.872 cv
334.765 208.919 li
cp
.866667 .654902 .580392 rgb
f
336.026 212.142 mo
336.026 212.142 337.538 210.944 338.141 211.017 cv
338.423 211.051 338.528 211.299 338.454 211.573 cv
338.298 212.159 336.471 212.989 336.471 212.989 cv
336.026 212.142 li
cp
f
337.694 214.992 mo
337.694 214.992 339.377 213.705 339.913 213.994 cv
340.006 214.044 340.105 214.157 340.023 214.373 cv
339.824 214.901 338.3 215.84 338.3 215.84 cv
337.694 214.992 li
cp
f
382.313 193.786 mo
382.233 193.976 382.053 194.086 381.853 194.086 cv
381.663 194.046 li
377.123 192.126 li
378.143 191.476 li
382.053 193.126 li
382.303 193.236 382.423 193.526 382.313 193.786 cv
cp
.729412 .729412 .886275 rgb
f
283.315 161.783 mo
277.148 162.259 271.762 157.634 271.285 151.467 cv
271.133 149.519 271.488 147.653 272.249 145.999 cv
273.882 142.398 277.371 139.771 281.601 139.446 cv
286.906 139.041 291.633 142.398 293.145 147.277 cv
293.388 148.068 293.55 148.89 293.621 149.752 cv
294.098 155.92 289.483 161.306 283.315 161.783 cv
cp
.952941 .952941 1 rgb
f
279.523 134.67 mo
276.281 135.702 li
277.143 138.565 li
283.572 136.968 li
279.523 134.67 li
cp
.866667 .654902 .580392 rgb
f
283.315 161.783 mo
277.148 162.259 271.762 157.634 271.285 151.467 cv
271.133 149.519 271.755 149.105 272.516 147.451 cv
274.088 147.989 278.044 149.699 283.572 149.171 cv
286.97 148.857 290.989 148.162 293.145 147.277 cv
293.388 148.068 293.55 148.89 293.621 149.752 cv
294.098 155.92 289.483 161.306 283.315 161.783 cv
cp
.741176 .47451 .776471 rgb
f
278.705 124.978 mo
278.705 124.978 280.377 138.179 275.971 140.674 cv
273.05 142.329 278.788 142.33 278.788 142.33 cv
289.263 141.721 li
289.263 141.721 284.26 134.67 285.01 124.643 cv
278.705 124.978 li
cp
.952941 .952941 1 rgb
f
281.664 157.267 mo
280.542 158.777 276.202 159.261 272.615 156.984 cv
269.028 154.706 267.263 151.737 267.946 149.985 cv
268.298 149.081 272.679 148.956 276.266 151.234 cv
279.853 153.511 282.151 156.612 281.664 157.267 cv
cp
.321569 .321569 .447059 rgb
f
269.035 155.829 mo
269.035 155.829 275.055 133.328 276.747 135.863 cv
277.349 136.765 277.393 137.234 277.88 137.705 cv
278.741 138.539 285.479 139.285 288.65 140.142 cv
290.154 140.548 290.354 141.394 289.263 141.721 cv
287.367 142.289 283.572 142.947 283.572 142.947 cv
282.153 146.509 li
280.483 150.702 276.904 153.839 272.528 154.946 cv
269.035 155.829 li
cp
1 .8 .713726 rgb
f
279.494 150.765 mo
275.833 156.788 li
271.25 153.776 li
279.494 150.765 li
cp
f
279.326 118.379 mo
279.326 119.806 278.472 120.963 277.418 120.963 cv
276.365 120.963 275.511 119.806 275.511 118.379 cv
275.511 116.952 276.365 115.795 277.418 115.795 cv
278.472 115.795 279.326 116.952 279.326 118.379 cv
cp
.768627 .72549 1 rgb
f
282.967 109.468 mo
282.967 110.717 282.22 111.73 281.298 111.73 cv
280.376 111.73 279.629 110.717 279.629 109.468 cv
279.629 108.219 280.376 107.206 281.298 107.206 cv
282.22 107.206 282.967 108.219 282.967 109.468 cv
cp
f
287.06 116.325 mo
287.06 117.604 286.295 118.641 285.351 118.641 cv
284.407 118.641 283.642 117.604 283.642 116.325 cv
283.642 115.046 284.407 114.009 285.351 114.009 cv
286.295 114.009 287.06 115.046 287.06 116.325 cv
cp
f
281.718 157.167 mo
281.718 157.167 262.141 199.063 248.776 198.355 cv
238.044 197.785 232.943 184.793 229.091 170.278 cv
225.248 155.762 246.812 138.055 246.812 138.055 cv
246.812 138.055 247.518 143.822 248.029 153.964 cv
248.363 160.588 250.879 168.735 251.852 171.644 cv
252.088 172.341 252.225 172.744 252.225 172.744 cv
252.815 171.889 li
252.815 171.88 li
268.018 149.895 li
268.018 149.895 270.328 153.295 274.19 154.986 cv
277.846 156.588 281.718 157.167 281.718 157.167 cv
cp
.792157 .792157 .929412 rgb
f
183.749 245.53 mo
170.915 319.236 li
214.83 321.316 li
224.193 245.53 li
190.246 238.556 li
183.749 245.53 li
.8 .8 .8 rgb
f
227.49 115.246 mo
227.49 117.72 222.005 119.726 215.238 119.726 cv
208.472 119.726 202.879 117.637 202.883 115.163 cv
202.885 113.557 208.472 112.794 215.238 112.794 cv
222.005 112.794 227.49 114.03 227.49 115.246 cv
cp
.45098 .258824 .486275 rgb
f
212.195 69.5767 mo
210.79 69.7034 209.395 69.6338 208.332 69.4137 cv
204.69 68.6596 201.288 65.1382 198.838 62.5373 cv
197.991 61.6374 196.999 60.6766 196.089 59.6407 cv
191.209 65.6259 190.212 73.6657 192.111 81.7968 cv
193.806 89.0552 201.237 98.7463 208.761 99.9241 cv
215.476 100.975 212.635 98.4975 218.977 98.1035 cv
221.734 97.9322 223.925 97.0255 225.663 95.6027 cv
223.124 92.5218 220.835 89.1874 219.04 85.6884 cv
216.401 80.5441 214.119 75.0718 212.195 69.5767 cv
.227451 .227451 .227451 rgb
f
187.057 434.489 mo
184.975 434.489 182.916 434.485 180.873 434.476 cv
142.176 434.305 105.163 432.904 105.17 431.392 cv
105.173 430.667 113.557 429.805 126.554 429.125 cv
125.013 429.804 123.883 430.531 123.872 431.215 cv
151.614 431.134 li
152.023 431.141 152.452 431.145 152.896 431.145 cv
156.697 431.145 161.614 430.848 164.867 429.242 cv
164.732 431.108 li
171.476 431.215 li
171.683 427.95 li
173.046 427.944 174.412 427.942 175.785 427.942 cv
177.267 427.942 178.752 427.945 180.243 427.951 cv
187.588 427.984 195.264 428.082 202.875 428.231 cv
203.183 432.355 li
209.674 431.929 li
209.451 430.072 li
211.906 431.179 215.256 431.478 218.333 431.478 cv
219.757 431.478 221.123 431.414 222.314 431.336 cv
247.918 430.009 li
247.912 429.927 247.893 429.845 247.862 429.764 cv
259.259 430.373 266.706 431.048 266.704 431.645 cv
266.697 433.076 224.408 434.489 187.057 434.489 cv
.858823 .858823 .858823 rgb
f
148.851 418.368 mo
148.851 418.368 141.274 424.573 134.884 426.426 cv
133.071 426.951 123.903 429.261 123.872 431.215 cv
151.614 431.134 li
155.525 431.197 161.234 431.035 164.867 429.242 cv
164.732 431.108 li
171.476 431.215 li
172.191 419.924 li
172.184 418.226 170.585 418.593 168.822 418.96 cv
168.053 419.12 167.253 419.28 166.541 419.269 cv
148.851 418.368 li
.0470588 .0470588 .0470588 rgb
f
226.168 421.592 mo
226.168 421.592 231.948 424.295 238.197 425.843 cv
239.969 426.282 247.79 428.059 247.918 430.009 cv
222.314 431.336 li
218.549 431.583 213.042 431.691 209.451 430.072 cv
209.674 431.929 li
203.183 432.355 li
202.607 424.655 li
202.496 422.219 204.508 421.732 206.767 421.584 cv
226.168 421.592 li
f
226.839 231.151 mo
229.649 423.062 li
202.607 424.655 li
197.12 236.511 li
220.876 222.206 li
226.839 231.151 li
.254902 .513726 .768627 rgb
f
144.316 421.655 mo
172.045 423.399 li
198.478 241.967 li
191.651 237.25 li
175.378 226.008 li
173.463 224.686 li
171.143 240.371 li
168.95 255.203 li
144.316 421.655 li
f
152.21 422.151 mo
151.693 422.119 li
151.094 422.081 li
166.859 317.794 li
167.971 317.89 li
152.21 422.151 li
.192157 .392157 .584314 rgb
f
223.936 423.399 mo
220.64 246.63 li
220.837 246.488 221.03 246.344 221.222 246.197 cv
221.746 246.187 li
225.049 423.333 li
223.936 423.399 li
f
225.557 118.925 mo
203.986 118.617 li
209.1 116.619 207.264 96.8692 207.264 96.8692 cv
210.669 93.578 223.592 100.776 223.592 100.776 cv
223.577 101.138 223.572 101.501 223.567 101.854 cv
223.539 103.857 223.598 105.728 223.717 107.438 cv
224.179 114.487 225.557 118.925 225.557 118.925 cv
1 .8 .713726 rgb
f
246.058 59.149 mo
246.058 65.6983 253.941 71.0076 263.666 71.0076 cv
273.39 71.0076 281.273 65.6983 281.273 59.149 cv
281.273 52.5997 273.39 49.3717 263.666 49.3717 cv
253.941 49.3717 246.058 52.5997 246.058 59.149 cv
cp
.772549 .764706 .956863 rgb
f
248.93 63.8465 mo
250.219 66.3465 250.059 69.7004 247.983 72.7767 cv
247.659 73.2559 248.07 73.8915 248.643 73.8157 cv
253.969 73.1109 267.921 71.1994 269.738 70.2833 cv
274.546 67.859 247.779 61.6147 248.93 63.8465 cv
cp
f
270.556 59.3646 mo
270.556 60.7797 271.291 61.9269 272.198 61.9269 cv
273.105 61.9269 273.841 60.7797 273.841 59.3646 cv
273.841 57.9495 273.105 56.8024 272.198 56.8024 cv
271.291 56.8024 270.556 57.9495 270.556 59.3646 cv
cp
.576471 .576471 .8 rgb
f
262.023 59.3646 mo
262.023 60.7797 262.758 61.9269 263.666 61.9269 cv
264.573 61.9269 265.308 60.7797 265.308 59.3646 cv
265.308 57.9495 264.573 56.8024 263.666 56.8024 cv
262.758 56.8024 262.023 57.9495 262.023 59.3646 cv
cp
f
253.304 59.3646 mo
253.304 60.7797 254.039 61.9269 254.946 61.9269 cv
255.853 61.9269 256.589 60.7797 256.589 59.3646 cv
256.589 57.9495 255.853 56.8024 254.946 56.8024 cv
254.039 56.8024 253.304 57.9495 253.304 59.3646 cv
cp
f
231.783 224.843 mo
231.783 239.681 219.755 251.708 204.918 251.708 cv
190.081 251.708 178.053 239.681 178.053 224.843 cv
178.053 210.006 190.081 197.978 204.918 197.978 cv
219.755 197.978 231.783 210.006 231.783 224.843 cv
.254902 .513726 .768627 rgb
f
225.386 116.99 mo
235.683 127.038 li
236.766 127.603 242.166 131.192 241.886 132.382 cv
227.136 219.113 li
178.243 215.837 li
172.789 133.466 li
172.871 131.161 177.504 123.184 179.766 122.734 cv
204.363 116.99 li
213.936 120.883 li
225.386 116.99 li
.741176 .47451 .776471 rgb
f
202.818 115.278 mo
203.569 115.125 204.175 115.869 203.889 116.58 cv
203.06 118.641 201.807 122.551 201.466 127.96 cv
200.118 149.378 197.176 190.955 195.45 210.258 cv
194.782 217.806 182.834 319.178 182.834 319.178 cv
151.186 316.435 li
167.943 215.977 li
171.667 193.618 li
171.667 193.618 171.176 162.995 171.481 142.298 cv
171.54 137.984 171.574 135.33 171.721 132.244 cv
171.957 127.104 178.005 123.207 179.91 121.967 cv
185.621 118.252 197.914 116.279 202.818 115.278 cv
.843137 .843137 1 rgb
f
209.401 55.0746 mo
209.816 58.7608 210.757 62.4069 211.878 65.9215 cv
213.757 71.8183 216.172 77.6563 218.814 83.2522 cv
220.831 87.5271 223.432 91.3335 226.367 94.9749 cv
231.539 89.9533 232.156 79.8523 231.634 71.4484 cv
231.002 61.2831 226.379 53.6245 216.271 52.5081 cv
215.901 52.4612 213.957 55.9258 213.581 55.9056 cv
212.256 57.2806 li
211.039 58.605 210.617 53.7502 209.401 55.0746 cv
cp
.2 .2 .2 rgb
f
226.14 80.7753 mo
227.01 79.4079 231.556 76.2958 233.056 79.0457 cv
234.555 81.7956 228.154 95.9978 226.106 95.4098 cv
224.058 94.8217 223.221 91.4573 223.287 91.0172 cv
223.353 90.5771 224.715 83.0148 226.14 80.7753 cv
cp
.94902 .74902 .678431 rgb
f
223.64 106.142 mo
223.583 104.989 223.555 103.772 223.561 102.499 cv
223.601 102.547 li
223.583 103.797 223.598 104.998 223.64 106.142 cv
.807843 .807843 .807843 rgb
f
223.756 108.345 mo
221.177 107.902 211.132 104.422 210.214 98.7575 cv
210.213 98.755 210.215 98.7537 210.221 98.7537 cv
210.345 98.7537 212.113 99.443 214.32 100.132 cv
216.527 100.821 219.175 101.511 221.058 101.511 cv
221.64 101.511 222.148 101.445 222.549 101.293 cv
223.561 102.499 li
223.555 103.772 223.583 104.989 223.64 106.142 cv
223.668 106.902 223.707 107.637 223.756 108.345 cv
.807843 .654902 .588235 rgb
f
230.911 72.2374 mo
231.041 72.8238 231.141 73.4348 231.213 74.0428 cv
231.241 74.3308 231.263 74.6292 231.283 74.9191 cv
231.308 75.3147 li
231.328 75.6848 231.364 76.292 231.409 77.0578 cv
231.655 81.1849 232.116 90.2221 231.97 95.5595 cv
231.88 98.7716 230.884 101.71 228.977 103.223 cv
227.051 104.751 224.834 105.12 221.779 105.014 cv
218.886 104.913 215.057 103.811 212.771 102.026 cv
205.177 95.5614 li
205.305 92.9994 li
198.559 90.0007 199.866 80.7323 199.083 73.0952 cv
198.255 65.138 203.887 57.9606 211.885 57.5608 cv
213.827 57.4693 215.718 57.6744 217.498 58.1446 cv
217.752 58.2042 217.991 58.2761 218.24 58.3546 cv
218.249 58.3527 li
224.575 60.3031 229.521 65.564 230.911 72.2374 cv
cp
1 .8 .713726 rgb
f
207.123 77.9984 mo
206.783 78.1253 206.531 77.6822 206.809 77.4499 cv
208.234 76.2598 210.666 74.5374 213.092 74.2462 cv
216.861 73.794 218.614 74.8188 217.564 75.8033 cv
216.546 76.7572 215.192 75.8056 213.359 76.0543 cv
211.97 76.2428 208.976 77.3059 207.123 77.9984 cv
cp
.286275 .286275 .278431 rgb
f
231.005 72.2353 mo
231.135 72.8217 231.404 73.4435 231.213 74.0428 cv
230.154 73.8497 229.186 73.7075 228.561 73.7034 cv
226.712 73.6854 225.488 74.8036 224.361 73.9834 cv
223.2 73.1264 224.808 71.896 228.602 71.8755 cv
229.369 71.8749 230.24 72.0035 231.005 72.2353 cv
cp
f
227.337 88.4611 mo
227.286 88.4681 li
221.522 88.8171 li
221.342 88.8282 221.187 88.691 221.177 88.5109 cv
221.165 88.3314 221.304 88.1736 221.483 88.1657 cv
226.662 87.8518 li
226.089 87.0738 225.534 86.4928 225.035 85.9699 cv
223.98 84.8647 223.068 83.9099 222.6 81.773 cv
222.561 81.5974 222.672 81.4234 222.848 81.3845 cv
222.848 81.3844 li
223.025 81.3457 223.199 81.4573 223.237 81.6334 cv
223.667 83.5913 224.479 84.4423 225.507 85.5191 cv
226.12 86.1613 226.815 86.8889 227.537 87.96 cv
227.603 88.057 227.611 88.1819 227.559 88.2869 cv
227.515 88.3764 227.433 88.4399 227.337 88.4611 cv
cp
.866667 .654902 .580392 rgb
f
210.565 80.7926 mo
216.116 79.7771 li
216.199 81.1159 li
210.497 81.9161 li
210.565 80.7926 li
cp
.286275 .286275 .286275 rgb
f
214.851 81.8109 mo
214.903 82.6415 214.543 83.3397 214.049 83.3705 cv
213.554 83.4012 213.111 82.7528 213.059 81.9223 cv
213.008 81.0917 213.367 80.3935 213.862 80.3627 cv
214.357 80.332 214.8 80.9804 214.851 81.8109 cv
cp
f
225.075 78.3627 mo
230.626 77.3471 li
230.709 78.6859 li
224.998 79.6213 li
225.075 78.3627 li
cp
f
229.517 79.3036 mo
229.568 80.1342 229.209 80.8324 228.714 80.8632 cv
228.219 80.8939 227.776 80.2455 227.725 79.4149 cv
227.673 78.5844 228.033 77.8861 228.527 77.8554 cv
229.022 77.8246 229.465 78.473 229.517 79.3036 cv
cp
f
199.734 83.2342 mo
199.734 83.2342 201.139 71.1085 210.644 68.5609 cv
220.149 66.0132 233.168 63.4283 228.579 53.5616 cv
227.005 50.1784 219.653 48.672 214.664 49.8617 cv
192.662 55.1078 186.01 69.0532 199.734 83.2342 cv
cp
.227451 .227451 .227451 rgb
f
221.685 93.8338 mo
222.868 93.7868 226.182 93.577 228.238 92.6701 cv
228.411 92.594 228.602 92.7129 228.595 92.9013 cv
228.564 93.8076 227.96 95.9173 225.878 96.3547 cv
223.373 96.8814 222.069 95.0619 221.489 94.2281 cv
221.375 94.0645 221.485 93.8417 221.685 93.8338 cv
cp
1 1 1 rgb
f
195.281 211.956 mo
222.579 213.496 li
222.188 220.413 li
194.579 218.668 li
195.281 211.956 li
cp
.227451 .227451 .227451 rgb
f
246.078 134.108 mo
242.494 121.992 230.012 118.352 227.834 117.149 cv
227.855 119.651 229.518 122.66 230.48 125.09 cv
231.18 126.858 231.253 128.406 230.83 130.246 cv
230.162 133.152 230.164 135.877 229.871 138.823 cv
229.634 141.204 228.736 143.311 227.857 145.511 cv
226.722 148.354 225.921 151.38 225.665 154.436 cv
225.522 156.152 225.695 157.701 225.074 159.329 cv
224.761 160.151 222.461 185.578 221.789 186.277 cv
221.559 189.375 221.017 194.758 219.617 206.09 cv
216.197 233.804 212.094 321.316 212.094 321.316 cv
233.678 322.487 li
235.046 221.107 li
235.056 220.271 li
235.056 220.124 li
235.076 219.033 li
235.135 214.394 li
235.145 214.139 li
235.154 213.411 li
235.154 213.156 li
235.253 205.844 li
235.253 205.844 254.021 160.96 246.078 134.108 cv
cp
.843137 .843137 1 rgb
f
202.883 114.913 mo
202.883 114.913 li
198.059 116.044 194.201 119.654 192.751 124.392 cv
190.475 131.829 li
198.89 163.216 li
191.578 167.352 li
192.233 170.826 li
193.17 175.79 194.948 180.557 197.491 184.922 cv
202.883 114.913 li
cp
1 1 1 rgb
f
227.913 116.256 mo
230.616 118.36 li
233.487 120.595 235.369 123.865 235.859 127.471 cv
236.972 135.664 li
224.568 164.609 li
231.173 169.801 li
230.195 172.583 li
228.398 177.694 225.533 182.362 221.789 186.277 cv
227.913 116.256 li
cp
f
225.356 212.37 mo
225.219 212.35 225.101 212.399 224.993 212.478 cv
224.894 212.566 224.835 212.684 224.825 212.812 cv
224.658 214.876 li
224.54 216.311 224.993 217.696 225.926 218.797 cv
226.86 219.898 228.167 220.566 229.602 220.674 cv
234.948 221.107 li
235.046 221.107 li
235.056 220.271 li
235.056 220.124 li
235.027 220.124 li
229.68 219.701 li
228.511 219.603 227.44 219.053 226.673 218.158 cv
225.916 217.264 225.543 216.124 225.641 214.954 cv
225.769 213.382 li
235.145 214.139 li
235.154 213.411 li
235.154 213.156 li
225.356 212.37 li
cp
.729412 .729412 .886275 rgb
f
184.956 215.548 mo
186.075 215.636 187.175 215.286 188.035 214.554 cv
188.895 213.822 189.418 212.799 189.509 211.673 cv
189.648 209.945 li
176.57 208.894 li
176.431 210.623 li
176.341 211.748 176.695 212.842 177.426 213.701 cv
178.158 214.561 179.181 215.085 180.307 215.175 cv
184.956 215.548 li
185.303 216.563 mo
185.161 216.563 185.019 216.557 184.876 216.546 cv
180.227 216.172 li
178.835 216.06 177.57 215.413 176.665 214.35 cv
175.76 213.287 175.322 211.935 175.435 210.543 cv
175.614 208.316 li
175.636 208.04 175.883 207.844 176.152 207.857 cv
190.227 208.988 li
190.359 208.999 190.481 209.061 190.568 209.162 cv
190.653 209.263 190.695 209.395 190.685 209.527 cv
190.505 211.753 li
190.394 213.145 189.746 214.41 188.684 215.315 cv
187.73 216.128 186.542 216.563 185.303 216.563 cv
f
198.828 151.772 mo
187.372 151.237 li
186.188 151.181 185.273 150.177 185.329 148.993 cv
185.524 144.825 li
185.579 143.641 186.583 142.727 187.767 142.782 cv
199.224 143.318 li
200.407 143.373 201.322 144.378 201.267 145.561 cv
201.072 149.729 li
201.016 150.913 200.012 151.828 198.828 151.772 cv
cp
.254902 .513726 .768627 rgb
f
199.551 150.645 mo
186.89 149.954 li
187.054 146.959 li
199.715 147.65 li
199.551 150.645 li
cp
.227451 .227451 .227451 rgb
f
167.943 215.977 mo
167.107 209.254 166.351 202.149 165.849 195.525 cv
164.012 171.26 165.638 168.892 170.021 156.214 cv
170.686 154.287 171.081 152.085 171.405 149.845 cv
171.283 169.693 171.667 193.618 171.667 193.618 cv
167.943 215.977 li
.658823 .658823 .658823 rgb
f
171.426 225.072 mo
168.536 220.627 li
168.336 219.104 168.138 217.551 167.943 215.977 cv
167.943 215.977 li
171.667 193.618 li
171.667 193.618 171.283 169.693 171.405 149.845 cv
172.001 145.722 172.357 141.469 173.707 138.565 cv
174.651 136.533 174.343 134.108 174.38 134.108 cv
174.403 134.108 174.57 135.112 175.304 137.869 cv
177.785 147.189 182.385 146.714 182.016 157.033 cv
181.441 173.135 184.083 193.249 185.226 208.586 cv
176.152 207.857 li
176.144 207.857 176.135 207.857 176.127 207.857 cv
175.867 207.857 175.635 208.049 175.614 208.316 cv
175.435 210.543 li
175.322 211.935 175.76 213.287 176.665 214.35 cv
177.57 215.413 178.835 216.06 180.227 216.172 cv
184.876 216.546 li
185.019 216.557 185.161 216.563 185.303 216.563 cv
185.428 216.563 185.552 216.558 185.676 216.549 cv
185.747 218.762 185.752 220.798 185.67 222.614 cv
185.59 222.569 li
184.877 222.334 184.148 222.238 183.409 222.238 cv
181.192 222.238 178.901 223.101 176.811 223.643 cv
175.014 224.108 173.219 224.586 171.426 225.072 cv
185.295 215.562 mo
185.182 215.562 185.069 215.557 184.956 215.548 cv
180.307 215.175 li
179.181 215.085 178.158 214.561 177.426 213.701 cv
176.695 212.842 176.341 211.748 176.431 210.623 cv
176.57 208.894 li
185.299 209.596 li
185.447 211.682 185.565 213.674 185.64 215.548 cv
185.525 215.557 185.41 215.562 185.295 215.562 cv
.572549 .572549 .658823 rgb
f
185.303 216.563 mo
185.161 216.563 185.019 216.557 184.876 216.546 cv
180.227 216.172 li
178.835 216.06 177.57 215.413 176.665 214.35 cv
175.76 213.287 175.322 211.935 175.435 210.543 cv
175.614 208.316 li
175.635 208.049 175.867 207.857 176.127 207.857 cv
176.135 207.857 176.144 207.857 176.152 207.857 cv
185.226 208.586 li
185.251 208.925 185.275 209.261 185.299 209.596 cv
176.57 208.894 li
176.431 210.623 li
176.341 211.748 176.695 212.842 177.426 213.701 cv
178.158 214.561 179.181 215.085 180.307 215.175 cv
184.956 215.548 li
185.069 215.557 185.182 215.562 185.295 215.562 cv
185.41 215.562 185.525 215.557 185.64 215.548 cv
185.653 215.886 185.665 216.219 185.676 216.549 cv
185.552 216.558 185.428 216.563 185.303 216.563 cv
.513725 .513725 .596078 rgb
f
206.99 254.934 mo
164.262 265.647 li
163.138 265.929 161.998 265.246 161.716 264.121 cv
155.06 237.571 li
154.778 236.447 155.461 235.307 156.585 235.025 cv
199.313 224.313 li
200.437 224.031 201.577 224.714 201.859 225.838 cv
208.515 252.388 li
208.797 253.513 208.114 254.652 206.99 254.934 cv
.741176 .47451 .776471 rgb
f
166.794 222.865 mo
166.524 217.534 li
167.446 218.952 li
166.794 222.865 li
.658823 .658823 .658823 rgb
f
169.87 231.602 mo
168.434 231.602 167.179 230.477 167.102 228.965 cv
166.794 222.865 li
167.446 218.952 li
168.536 220.627 li
168.762 222.354 168.99 224.042 169.215 225.674 cv
169.952 225.472 170.689 225.271 171.426 225.072 cv
174.901 230.413 li
170.557 231.516 li
170.326 231.574 170.096 231.602 169.87 231.602 cv
.572549 .572549 .658823 rgb
f
169.215 225.674 mo
168.99 224.042 168.762 222.354 168.536 220.627 cv
171.426 225.072 li
170.689 225.271 169.952 225.472 169.215 225.674 cv
.427451 .427451 .47451 rgb
f
186.64 225.234 mo
186.64 226.693 180.066 230.936 175.826 230.936 cv
171.585 230.936 168.24 230.296 168.24 228.837 cv
168.24 227.378 171.677 226.196 175.918 226.196 cv
180.158 226.196 186.64 223.775 186.64 225.234 cv
cp
.321569 .321569 .447059 rgb
f
186.388 227.553 mo
182.721 228.69 li
183.212 229.889 187.182 243.625 184.686 248.086 cv
184.489 248.45 184.253 248.755 183.968 248.991 cv
183.654 249.285 183.27 249.492 182.828 249.6 cv
182.612 249.649 182.376 249.659 182.13 249.62 cv
181.767 249.57 181.364 249.423 180.941 249.197 cv
180.931 249.197 li
176.44 246.819 169.819 233.218 171.68 226.39 cv
179.552 223.586 li
179.552 223.586 186.653 226.393 186.388 227.553 cv
cp
1 .8 .713726 rgb
f
174.532 126.333 mo
165.808 135.279 158.433 155.508 161.053 185.753 cv
162.761 205.468 168.187 229.262 168.187 229.262 cv
168.187 229.262 172.534 226.71 176.942 225.674 cv
183.698 224.087 186.64 225.234 186.64 225.234 cv
186.64 225.234 169.899 163.722 191.578 119.972 cv
191.578 119.972 181.824 118.855 174.532 126.333 cv
cp
.843137 .843137 1 rgb
f
184.686 248.086 mo
184.489 248.45 184.253 248.755 183.968 248.991 cv
181.324 241.63 li
181.236 241.374 181.364 241.089 181.619 241.001 cv
181.875 240.912 182.16 241.04 182.248 241.296 cv
184.686 248.086 li
cp
.866667 .654902 .580392 rgb
f
182.13 249.62 mo
181.767 249.57 181.364 249.423 180.941 249.197 cv
180.931 249.197 li
178.661 242.858 li
178.573 242.603 178.7 242.327 178.956 242.229 cv
179.212 242.141 179.496 242.278 179.585 242.524 cv
182.13 249.62 li
cp
f
171.404 230.244 mo
171.404 230.244 171.702 239.819 173.628 242.582 cv
173.893 242.962 175.201 242.54 174.667 240.797 cv
173.683 237.584 174.901 230.413 174.901 230.413 cv
171.404 230.244 li
cp
1 .8 .713726 rgb
f
165.482 190.741 mo
165.237 190.741 165.022 190.56 164.988 190.31 cv
164.95 190.036 165.141 189.784 165.415 189.746 cv
169.177 189.223 169.713 188.316 169.769 187.951 cv
169.947 186.795 167.144 184.908 165.099 183.938 cv
164.849 183.82 164.742 183.521 164.86 183.272 cv
164.979 183.022 165.281 182.917 165.526 183.034 cv
166.462 183.478 171.11 185.806 170.758 188.103 cv
170.557 189.416 168.853 190.277 165.552 190.736 cv
165.482 190.741 li
cp
.729412 .729412 .886275 rgb
f
198.563 220.046 mo
195.842 219.904 li
196.885 212.038 li
199.486 212.184 li
198.563 220.046 li
cp
.254902 .513726 .768627 rgb
f
214.273 220.945 mo
217.026 221.263 li
217.557 213.212 li
215.006 213.068 li
214.273 220.945 li
cp
f
210.369 212.982 mo
205.389 212.547 li
207.051 193.498 212.404 122.506 212.458 121.791 cv
217.444 122.167 li
217.391 122.882 212.034 193.904 210.369 212.982 cv
cp
.45098 .258824 .486275 rgb
f
202.33 121.51 mo
206.138 129.188 li
214.788 123.824 li
223.705 129.249 li
228.042 120.545 li
228.657 119.2 228.484 117.524 227.971 116.136 cv
227.407 114.987 li
227.407 114.987 220.508 118.542 215.238 118.627 cv
208.506 118.735 203.063 114.685 203.063 114.685 cv
202.686 115.119 li
201.029 116.858 201.212 119.384 202.33 121.51 cv
cp
.843137 .603922 .886275 rgb
f
204.649 126.186 mo
214.243 120.926 li
214.681 120.686 215.213 120.699 215.638 120.961 cv
225.036 126.578 li
223.705 129.249 li
214.788 123.824 li
206.138 129.188 li
204.649 126.186 li
cp
1 1 1 rgb
f
211.594 219.728 mo
201.616 219.156 li
202.162 212.356 li
212.143 212.889 li
211.594 219.728 li
cp
.843137 .843137 1 rgb
f
283.131 151.367 mo
282.899 151.141 283.061 150.752 283.386 150.755 cv
285.286 150.769 289.953 150.456 292.132 149.007 cv
292.507 148.757 293.093 157.662 286.152 159.613 cv
279.211 161.564 284.139 158.991 284.514 158.712 cv
285.547 157.944 287.462 155.763 285.988 153.776 cv
285.167 152.67 283.675 151.894 283.131 151.367 cv
cp
.584314 .345098 .627451 rgb
f
252.815 171.889 mo
252.333 175.663 251.655 180.842 251.468 182.317 cv
251.429 182.572 251.223 182.749 250.977 182.749 cv
250.918 182.749 li
250.643 182.71 250.456 182.464 250.486 182.199 cv
250.908 178.936 251.458 174.7 251.852 171.644 cv
252.088 172.341 252.815 171.889 252.815 171.889 cv
cp
.729412 .729412 .886275 rgb
f
200.657 237.792 mo
195.392 238.856 li
195.282 238.88 195.209 238.988 195.231 239.099 cv
195.793 241.875 li
195.881 242.006 li
196.036 242.036 li
201.3 240.97 li
200.657 237.792 li
cp
195.995 242.79 mo
195.55 242.79 195.149 242.476 195.058 242.023 cv
194.497 239.248 li
194.392 238.732 194.727 238.227 195.243 238.122 cv
200.876 236.983 li
200.973 236.965 201.075 236.983 201.157 237.038 cv
201.24 237.092 201.298 237.178 201.317 237.276 cv
202.108 241.189 li
202.149 241.392 202.018 241.59 201.815 241.631 cv
196.184 242.77 li
195.995 242.79 li
cp
1 1 1 rgb
f
198.938 76.2824 mo
198.802 76.2565 li
198.608 76.1809 198.514 75.9636 198.589 75.7707 cv
202.405 66.0363 207.378 64.551 219.392 60.9616 cv
222.592 60.0061 224.423 58.1154 224.057 56.1457 cv
223.733 54.3947 221.48 52.655 217.298 52.9758 cv
217.078 52.9865 216.911 52.8361 216.895 52.6306 cv
216.88 52.424 217.034 52.2438 217.241 52.2277 cv
221.873 51.8796 224.411 53.9392 224.795 56.009 cv
225.129 57.8103 223.971 60.3767 219.607 61.6804 cv
207.841 65.1955 202.97 66.6506 199.288 76.0441 cv
199.229 76.1921 199.088 76.2824 198.938 76.2824 cv
cp
.176471 .176471 .176471 rgb
f
204.966 83.5642 mo
203.558 82.7616 198.347 82.2116 197.568 85.2455 cv
196.589 89.0571 207.455 98.5739 208.992 97.0972 cv
210.528 95.6206 211.525 92.519 211.262 92.1607 cv
210.998 91.8023 207.272 84.8789 204.966 83.5642 cv
cp
1 .8 .713726 rgb
f
199.893 87.1412 mo
199.842 87.1485 li
199.661 87.1593 199.507 87.0225 199.496 86.8426 cv
199.451 86.0976 199.647 85.5329 200.08 85.1635 cv
200.85 84.5093 202.063 84.7698 202.114 84.7816 cv
202.289 84.8206 202.4 84.9947 202.361 85.1705 cv
202.322 85.3457 202.148 85.4592 201.972 85.4186 cv
201.963 85.4167 201.022 85.2164 200.502 85.6621 cv
200.235 85.8907 200.115 86.2747 200.148 86.8025 cv
200.157 86.9649 200.047 87.107 199.893 87.1412 cv
cp
.866667 .654902 .580392 rgb
f
199.064 67.4602 mo
198.891 67.4177 li
198.707 67.3215 198.636 67.0954 198.732 66.9118 cv
200.922 62.717 206.02 61.01 210.118 59.6379 cv
212.856 58.7214 215.222 57.9294 215.504 56.7341 cv
215.618 56.2536 215.543 55.8698 215.275 55.5607 cv
214.338 54.4792 211.317 54.4978 210.236 54.5959 cv
210.024 54.6145 209.849 54.4621 209.829 54.2565 cv
209.809 54.05 209.962 53.8679 210.168 53.8488 cv
210.344 53.8337 214.461 53.4768 215.841 55.069 cv
216.272 55.5666 216.405 56.1848 216.234 56.9069 cv
215.855 58.508 213.429 59.3205 210.355 60.3493 cv
206.387 61.6784 201.447 63.3322 199.396 67.2585 cv
199.33 67.3869 199.199 67.4602 199.064 67.4602 cv
cp
.176471 .176471 .176471 rgb
f
202.116 244.412 mo
200.738 244.757 li
200.207 244.89 199.668 244.568 199.535 244.036 cv
197.476 235.825 li
197.343 235.294 197.666 234.755 198.197 234.622 cv
199.574 234.276 li
200.106 234.143 200.645 234.466 200.778 234.997 cv
202.837 243.209 li
202.97 243.74 202.647 244.279 202.116 244.412 cv
cp
.227451 .227451 .227451 rgb
f
302.134 220.536 mo
302.144 220.816 301.924 221.036 301.644 221.046 cv
285.804 221.356 li
285.794 221.356 li
285.594 221.226 285.404 221.106 285.214 220.986 cv
284.984 220.846 284.904 220.606 284.944 220.366 cv
301.624 220.046 li
301.914 220.046 302.134 220.256 302.134 220.536 cv
cp
.866667 .654902 .580392 rgb
f
302.464 223.146 mo
302.474 223.426 302.254 223.656 301.974 223.656 cv
291.114 223.866 li
290.234 223.576 289.444 223.256 288.714 222.916 cv
301.964 222.656 li
302.194 222.656 302.464 222.876 302.464 223.146 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (Myst) ()
%%Title: (sincenew-01.eps)
%%CreationDate: 7/12/2018 1:22 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj26BpGi)`ra"-'LUa"U&A!1el3:2h+c(^oi4`Si)Mho[M_j3Crh'-L93$0`KVWUUKM:gEO`44qfh\0=R[[N"FR/$\rH,aC
%cZ2K86"\Me77Pp\PnDSSs#2n2Up;)Nqb(Ls-XA9<AVG53..:qROS'XhNA^<e;R[Fm4+")!.;ZIP)V%<X]q!dN;64DRMl6&=1%R$!
%<Z?O$euQd<3Rl/fHUic^2(URf[:1L.ZPES4,HC[A%CMi0r(M'PZs<d\6.kG;i1Op*nc%*cZ:f_rJ+FaG.U.:"T)>Nl)h,Egg\[q6
%i85UT=SV^@4_uIS/\0VgYZYcW4-`8U3a0hEl=B&9b=k)^.<_a4*`"+8"Woi#1>'Ntb_mf7g/L_^+9_XUl2UN3iC<n>hkIpda2KZ[
%_U!DFagg-PhHh9#Ydo:k19LjhgU`!HciHJqBoo^5X[]WtCn8%6,8Y,9L:(X$fEmB_KI+:4TSbXTP#UrqbZ"`c;`/7i4J;*D0<9K%
%jk<J\;#ledeq*gBSX>qan!3D2jiipm=:SQ(C3$H%603S]*M/%M[kr?E>7Ff?lBMiQN>i3AWOn.1=G:2(eI0nOO\fN+k[.WTYh1uG
%42;5`C):m$SFJ3&h=GN$Vt_K)l5$sp(X915fQ^*mois^+]Ssom&f+EfN"i_:3e2qKN(?;pM=n-^BicILpOLn'Zmqu=qQ^)rQ+#%U
%Ygob<@kLT$`ohhb10Hj3':9k):7-1%'@tFDKmg>5S)>YE]6f&kDq<)NN>aF!)uj.R@19q^e]+Tf2ZA?CK-n0(4V\#<4`<T>8f\lM
%li3RJGQ,ur[0p>Z[2Rl`G5\6,fDj+Yb)PF8ZW!iY)?)BYhqlQ#IrpA:dIA4U;=^J,"oR$B")o'*,f"qa*Mo\8W3]b>Mm5Oh(+[XV
%,C2O5%m-Vo?g=,Mpo3+WLS[b@"b^.+]K#ltIo,$GZ6-nIfGDCiS2h_;*7)Xn1]2s-oG8^Ski1J@^caJMBKPK4c/A;q`HneS=;/m?
%k-/!"`D([\a5Q;<^i*p&cHU<,2k`!c9fX"+&f-QVi0kCiOu'`W4l\fEcJ(0c"sFG6YL30(KAN\Z&$([:dM4^1AcTVSXYB18r\VAg
%/NU+c'<kI3IXrY3(.`h<WiKUl$rh4K0=QEO]g?^-67`'/9R4S7%Le2@8i*]2@^TB"D&&OQPu;5-eSUpi%NCDmD]#:@+>ZB":4h/(
%c"L]E_N:Ig;uFP>@Nni0]B"3N\2`3,)!HXTqMRD0i]#04G%.Enc&=1poSD1NDWCis=/Q\]qRs86jg28#>depReDP-]UBiBV=g!;?
%\jRkT/T^E*&bPZijZ&Op3VZH5DH&.R>&4Cf]ip>[`Jq:++[f5S]T1b]HmH;J,dal(KM9RE?\hCWi2K_G9Am\!)Wk0Nh2AC1V,Rm7
%I^D1F.U@-mU35_@^G*lrQkTG#GWr(&R24"C>Vd$f/D:;*B%T";(tY4g]ForHI[E[4-^?`;+.7b!V%^.s-@1I1)RDjCNNqdrP`/X"
%b)(ib2gc0t^cMVp3b^f3/rm<?KuIC?]\W\l["E8E;Y2uU%"GtHh0BJo&:Mi*9'F\;><bT)[??sXVcKq;Q]&(SXibXm'8!?j!!RGG
%<jBD5l)[c7\&(1kYVSr,ohPE2rmU[oeeEKl0.^o,?=rF%)QfY*(A_@=G'0e!/*5(0-,o/g)OH$Vk].%E4diX\EdH;.0cO&1>gl8#
%R=A,Yj.FGb_N,C0pbBK3jL1+7<EhopZRg*u,;FLVQ#_b]@A.\cX[0[=,0Dlk:+%=0.(#1IE]p68dS4<$6tE4M3pqUG<!l.!%bDW0
%/5bG;R8CS:d&Bj;ACP_T<">[XBoq.LH>F3ACO)[&G$Jj=Ki[uN$YW6ZJ,7<KCN;t'UF4Y#gYHT_"_S1&CHD1Q\^\7!(SsmsHR](j
%(/?;p/fV;;2Xo*\1-?O&1_Sgi^AMKW%*$L\9sW.T>=EN&;BR;=3\F;lBQRITE/S3n.5^d1oC()^ogtJQQ25&CeiOChm/40:W&5N2
%o''&Vb9%W+)(VHeY`oYo1+P0,DW3!!oB[f>$J3e6F(_*#J&ATSBbeHhX?LQ%g,%XS>537iJhAk2DA$3d'Jadmg<Em7R;;Q'P$mG+
%rHDO/ccY0@FLk'4Vin6?ZK!g_qtBMbZgVfSktP_^k;im^nScj29K%dR#P;Ui2#eFT^(o3;hc!YH0\:'N-)ln8j2L<@`?1FTY1FBS
%'O*#'5qY/U]04,TNl0=FRTYsrf2UJK.V1T#RSKha/Rbf/MAaB%a#,<.&M(;T&K^jcA`.2)oB'n*"Z,1/c]p\kOYs#opmgA$W%40+
%h-(Uj=JV<^ZLHMnQ\N8th)*\FPoA7:7bK:`*1<Cje)3`kWOMf8Ar%mJ-^FPi[W%:TDhc5+4r)caA]HYc(dbWt-:OY2/ls__4q6);
%U18=SMY0RnPr+jnDdT=I"IAZ<pBmIb9,.b,(*Ba/T;slrMGrI(+'1+,oBR7k9/iEBpg3!>?YgIhm<5=.?b^thP:Zm60&i4\^*]E:
%Y8k'b9#PX!1Feehhi$o6Ep=J&g%>Y^:7;kf&MQ>^CtC"j$nO4n:FF+$S2>;+-@65:)#\i@I%H(Y/t6M"*5qX7:i',mB=4t-7eC";
%m<CK3HqgtYC.nS1l,XREi'47fYN&*j'leR8hA[h;GJi!GLl4:=*F'Z)C_(g"L\u)Y+f@;o1>>0fm3*!DP1^oIC_(gL<,`)QQm.''
%XnIiJTAV?-D69V`/[KlcftR"FR)a%#Gd_NQgGb_k)pe5;IpWIqJu:EZ2kHP1$Ds0m0L+%-jdso\,-i;4p%@OJ<Ukl!'NcpF]u;F4
%f3_s&Q?Wbah//^5dS5Y/hVr$$=&Ts:Q'7DL45=N!_-=%>&U>1-9XsGYFH**JF,H2[l5BP<]ejHg?ksoT7EB'QZ<oIO<_ck-=C2)K
%+0L,u?TDu)I'5B,@:uDOQ<,!,@f=_LY$'t)E^FEqFG.q;)7d*KfdqUGF$our`m9=1@KWG$^IkVtlM@W]jLE9)VO1+\KtgMT!u#7d
%*2^hZaRe.XGBMQTT,\+s)EV+J?V@[0)eOsP.q2[L.oR(.^diUa0Pp]mdg)(0FaE2>s"qRM:)3T9=Cl:^9VG\7BWi!$]3&V[GaS_A
%rkOb1JX=Ig]]_$W#@;KdL>jkm^rn:u1(1b=!\^mq94J`^q+h3$`[CY\-dQF7!_<RMiORMOUoCu-i^uLnM%?jbgM,G-*\nY3A=?e+
%JR+?._MU0kR.Lb:d`c.J0<@]cl,N),MQuH2l++SmIE(4+lc3b:ZWF55)K25s`sEO(PHGm<[lI0;Eh(tJ1r7<h]`=XK]m)tAptFrO
%fe#tJFc4]`n2e1tBm,-XfQK<gBmS\peRYi-"0[Vl$D)K:2i2>?aK,9enYEn_9Ch1OGU&S'iCheaX2=?Q0\>IEGVb_bY74Esq&m"*
%^o$H.YS<.!?K4[3VC0/;]Co]eL`*+iH0qfK80J/ZBf($ZN2h4s')EOp-ge-jPgg&`.6!g$%GUL8VSKW2__>f+`:Ato$a1AaE&-*U
%l_N6JPW>:Vq7'TZSZcQ@e7]UjQ-PG%/"=\qq2t+#&sjORaed4M]f*/=ja=4h%8]=,]9Z\YFm3OQ.;KhrJSVKF0\$q6qlEn;r4Ogj
%ZL)u$%8>rUIXdud3am&G&"ZS_\b"L>Ib-jVcE?g:D)uCj["4E-ZHNeONW$*2DgmCPSEA;=S<fUulZQl`ch4YlVSk6Wdee3jE#m3r
%]Pf1rr;MW+mECN`lX:LPCnffNOP's28IXS(:687l"FkTHHt"D<1`V[JSKOP`6ZTLHj:eU<V_,`-G(P+=*%+$#:V(S:SKOO5jZ#=f
%5/GB]G(P+=)m?G_]T*TbT?C5.c[4\?m+"jo:E!jEN%DV*q"UVZ\<[hKdOLPD`Tm%a-&o[Yog[@ueGOHFYYM^RY;ZqPPtpSLXgXh-
%.p25D;GD:"Io#<K9eL4XfP<T%[_kE^r72>CV)7A6qT=k7DMR'!EOQ9b8ASA+PoNWhem<l#q4<HPPD.&Y8k("@Z6adu#gK3UfAKiR
%E07EtItKpROO:DJ2@l*Y79iO!db9<,m3*omf@mR32Hm`1G\sb*`,oAW0eHG`T0EoH:*."?G@W7"_^-1M/jM4Yl+EDGUSNesr1r!l
%'=6K*5A6uiV#\"0Rj>M/J<N;)@JWZKl^^EdZ>#?_>Xrl3C/d.^Z6;6!'W28@)])e,K6j!Y&CT:ePH\&c[)Ns_Qo#4qMT9G8HS(tU
%Fs]WpS0n.pD>:B6oU)IHTj'2;?V<+/9gk:I)(RN1A@=??ZZ21sR!rJP51\d+EcLTio3n\%DkEhNJRJUoId06A=#8;PhWhcE)3AVG
%pu#;7f92_Z4pGGN;VlHElHI0A=aHX8=T4^&b<Ih8WHp[`SqRbK56p66='tGgQk[Qu`8AX"HgN,u,#)M.Ds92F=Z9"KrTtuodVP:U
%dtHW,+50hab!b-D`R)!LH.iU@NUJ;!5,c!7D#6Cj=</JMMq,S#5;&_F?FK/6>:KB.99*d[eOhtUVRRYO<32C/;]4\RU>s^:ob8ZQ
%/=!fSDRGkO,OR!CY%`/18?\Oq8!Zf-CDppZD%]R?pZFAad?s2N5H\-ilK.N2;GVFFCb'=V`D/T3l4R[K2)Q4;[@$+75d=RsF=NW7
%ruS717E9$kWYBnR,E5dQQuIuXUt)E?;79FTV;^rW_B?gDV3X_=s1(D=F[)f^FZV%Obj%cD]Dpg&N7V^+@2:mE9dg]:[IM(Lr)"Ft
%<R+*)gAGWmlf"&^%Mt3:^SZuTY'#uggrQiaT`;k0ZuIkVPuBDM4SOVV/qk$#m6$_E$"c:Yj13?Y%TuA+b\PYdm6]-WGjhq2#6.%A
%<iui;>[:FSIbHE?9gP\Z@_'o]Z_:e7N`l)C2HnA37^[6)@]+#hq0os:P;C<>PC1tInti#.RH47k90V<<F/'''mn,UjdndR1\4Ag>
%ABr&6cONAIa#0DV43_lq>WOX[4%I^n,#-M3(__>M4oi41ZT3S7-1(bpm09DI3':W`;!q2LoX$&+(1u/o>mG-gh#j5"mD-]K5:&N'
%[n]Z>gTU,fk>RW;R>/FfQV@AR%)Crie&s0^\ScV?UjE-2bDhFuAkuT+Zrk3^7V9tLVkL]TF4Ss\iE5_'.g65Q]&,'?<7@4RcPbO<
%<7CVLMJ<!,lo)jiUG@2(HBo9@MjebID1ZJLZ$Q+Iou'FPfn5fO3B33cLY7<MIsql+q]P(/D67/2dndVoSA!!(;E8&R-ho1=lKPsI
%B[SRiH\q>)Nae:boNO*lrb)q^m"20-<>m;]Fj<lB`bp4M;Dfe!^X#e8-AFm:juN9RZb8@lfpF8`m*E>bGCA7u8]/aoN)a.*Us+4o
%leng<f@^UG]$>1!0?&#[4pNCY,UPVUAPbeT2r=s'MeGeaSX&1Gj=I#[G(4?Ed?mI'fUkSh-A=ga3hhakc=RZJ$.lPjLrQ6JnQA7i
%(=BWE&IiNE+r[F-F)<*>;fEPleD*H#lROXY((.mM4XZ8/8BJ>@.J:=Al'k+&-Ir+\N4L2rH%eH4)S%Crj(!C$A?'"UZDRA!/0r47
%Q@&HYmp_:*L7Z)Z0NeW,dW*RN8#p5T/'Rq)RD1]PpLaE]^[CQeYUX;bhDG"S;tuaOP^@d,&pIsuh]t1/.1e@Xpgt#nbi,$OHo$QH
%ME[2j-AQN^Y+)&<N9+"e\J@B$a#D8<T810e=(a2Hhm4!Lrt-o&MI5)*QK7.Ab/?u+O%GZg,+IS6a-=>d1_X@4_CUm']V[,oPK&`V
%$*Tcdq@ds.nU-qFA%4^]4q6r+ip7_I8RUs8gdXrU*g84\VL1$NKpKKNH\'4O%%-@TBi8J?r5qdm`$4Dh^I^H?cCA34SVj!cruUOe
%'IRIpNSI,^R>JD7;p:r+p;OQ34r'DWYpHet<ijojl9SM]9BdX.(TWL1IetSf%Bht1McIcuD=Ws8ZW\o6[BSN@/N0f/b,H,L\J/7b
%f>?"A1?Q?qKo_tkj6-fua##]E.6,_\IH$6@'[`!-UMWq'k.4[E)u'L%mP#e=g%$`>gR-U__QQoq2Xt%E_OnP+>lU:S>$T,?P`o,b
%r\$^qoV>BeVT[VkNXqi&lJKQ&QWX=%'\Y"E;N`Gp*1MMD@QMQgBe$rmbDg9eeOhtUVRXbX4MB0\,L*>UM5'%!<4u.)_*,b8WE\Zu
%ae21".Tq"$e+-Cu>rg0+Lg4\"dn!mq,dCl@Ino#GNMt_)j-jL/,bI!6r6"+nVt*"$e=r[IUVIQbDBk-jgDJff;OFa;X[Xn%?DV+@
%odl!n8hH;.>PM,AR">]KV]c_M1ejAdBdPY+EV@B)rMu-tgf'SsP);CL?!pBP-H[%[6WTYQ<"tI(&*)C*U85WPFbuVqo3@NZOO^>o
%C%?=B9%0#_P%HH_D^2/6O_;3QZWr_t0$5^]AT.^nFQT<nP3ip$1e^h#8t*k,(Q3U*MfQXWR##"3<&?N'>X(rn-tt#L?+BlXma>@\
%S=3Ee]E3;:':7>JiN,ur?8G8[^T08q%jM#:.)n9!WOgWA/o5Sk^7^rJCK#`J!N,1]dDFJrjF1Afs7q;..Sf8;].(L<AgZ_j:!f_]
%C4.GmAqFpUJh@4pc32t<+R%s.gVQ#*XHt/_7kbH>8'`.I4_UYo%4s2Ipc>!28:L0^s#k;KG<UMc=7*l>0BcSBPZ?hbEL9mIFk^Ps
%h."'B$6o.3WsiJXojrlmh'c=)PuB#W?1bAKW%Pp$h9su,YF"ZgZ?ebiM;I4hJZ2p15+KH#,K0%i1W";k_QrA1s0HuliqEsJi9t]g
%c9^V`2/E@R4KCF?Y1$b!'(`Xp"[4XGSs\W4;JT=Nk^+iO!rg<q[UZ@sPnh_iV2ZR]lT#H&YUh('9I]:3b'0BW+5Rd<)56e3hYt=*
%T#.D/!;d_$+L@R5nB&h;s+2ou\`hd'N+B*tP<hg#F`ZHm5C?EsI8lf^HrSOF%kdh^5O_gm(Tmq64nsTc8q%[=c"N"@s5RPJJ?m=?
%C`DOc?!m@jI]rptVE"u[^Fh-pE0Tb_I'>`j[khrD=.6k5I/8LlTRd5(8!CnuYo7dH+jY&p(oJ#QgJp4FjXWniPp5]<`,D;RWUs#,
%H#:AJlIrn^0!(o_r7e<SlbU^Vf)E]L8R(G_s4]'?c[%^5BWtP_l^^Y[o+U2(ECIF3TB%kkVY&udO4nTKMG=&!8L`C!]rVH%[="b!
%`NA6LYlf)-GI1l\8?MZ"O1#6X6Br)VqJts/Kd6QkD`.-UHFZ_1c5dA%5j"*hn'p)^hi"W1b",_>$KDpINKIm2mG:(2rDKIQ+U@,/
%NRE)3d_2<9R%as%0u;lWh1%Y8Y7ShXboDD-2!<%q7*4H'P:1m.;21O.F%>J\U/F*KO_Kfm8;$03'>i:R_XdHn@KFYI#/T=^9AOch
%;4@RUpI@es\QqTR%s9;i@<tQE2u)NCoI62XHT]crb3bD--\/q7JL#/8/#DJBj2+mUPbNZ6Zl^'a6fss)OXh>Ar63^dk6ISWf(6\t
%))]*LcX,!i&eA?/ItETMDe5J)N1AhIS2;;*UeFEA?<2n*(ced^5suX1NsV3ji+]mP(cJ#H7L*ahSa`HHU/ad)eHl]I@\no9.nEue
%<1Y/WRLHe0eD3NOUDA$1AMCWC_dJ('*mCalNgcc<\O:-5=b]r.X'o+">'ulSquWoZQDFgkDH='SPcI*H7^]'Y:*dH@`H"!,MqP%0
%CnLI>MUb>2TAA5G7OK7'DEF'JFrHeI@_3;^.fTnRS&fFSOYQINSCbR\Dfe(/doN6u*+$)%DW#(a)6a^p;:_R,gU2Gm\_M@i.CM:X
%NFJrY.:LYD`eLA.#a6J@\&&L\J`W?>B%Y85.s.DD8\%RCgi89"4&N00.b<A!@LGuN_Y>TlB_m3e+6d-K:`#4bkBN?f.XG\hZ>a9/
%,Kn*-,Ga?];,Iu?gaLag(Y]0XF%N$FY8+L`f(Uk>)#i"+CmHTBic1euknk-ZijFHf;4nL`Jo3BN;llU7Ml0uqYL/;"AcBSb=KZa]
%RJd\qUPl)HP[La^m1]PQSZiUfUu?DNM6Mg*,$)VWmtU59Llr)5M1,jH=ZobkF?<2>k7Nu*)>^Sb9_*8nQhtG.-,9/tf3?eFEO!(s
%2S7L_giQ4Q_EL!\hW3Jf7X5Omb03Ga)T@$#OoYb?[Khh&Sb1i:\^RJN%`7Lp@L#q`VbnpEEL#9X@'GrU9#Kl1eond*D"@HjF:tkE
%!V<Q/o)YhB2hbg(5\l*XKUW.74@(+Q\a;_m=u@Sr3c*bQ_RBX2G>R>e:9/@U.=O4l4.=BtQ^?MP&p\(:r#SlJ(B%olpRouI=Mej:
%[QkNH&]Qd0l,<.B87>I%4_9g%<geSXZO'UfcFc0<JEVCN4_uu1bWfQ_9uEn=;o).)`U]_#7Z.P$nN3:ub5bf`l1jks?:ra?'1<3t
%7fEG9EXF>S^5TLN!hu4kphFO7T4XkK5uPe3JVi.-_O+A3WCi.N3@k\S/$nl\dHUVd#j*.p6;C1dmJOr.#FTl_?B@jW:1MnZ6Dp&;
%Fp8ZA0F?7PSZ#8F/T]"!Z-#]l.(-R9/%M?TEkc6509gmY8b\m5FKN`D*QIH0`''Ao.C\r<OhT\5oU`?AqC*kQkhb)V\ADuhku#XC
%D5LPk/j+HrHHTU"@U(>CP3EbZf5)-M$^J,oGf*GGQn3e&aB!&K4gS-"(oBNEGgT:(W*)pl=WrQeDC&P3h[Zs?+'tNZ.mj^e*J%!+
%.o%L64auN1J)dlUo\3#&H^s$r<#@F<"T5^=TZKarP)#7ta&)4JU5S%_@A.5Ajml;46&QnG2=ukrURLL%7l54Z(n$IQ$@Qb2B?O_q
%E`u6WXS*qdM9:jd'03Eo.bQe\<5UNrMs]OsVcGWr1`.<:\ecG)Vd+(MCHXT"^`oUE*E]1k0$1>C@*qN,+'4Aso3m>Wj_U\l!QA"(
%[GV7T49<QEenG"82V&'J,IK8A*k^.qBm)H>l9])]7p))nU[&,Yej^GQ5%:DV;R9R'd3lLX(+Rkh6YRDFFhe6<K_=H5"GBd5bnS?p
%$P&Xko<`\4"g8m3L[qBQD+r"f9#+DbGHqj?0r-?sI&GDL=X\'4",/%e/Vb^P<r-@Si1V3eV*:nUWRY[B.anM,?)aGQ7[6?A%;as"
%SAG/u,B@%*?19KO:BSOC;H]hEh+>n-<8jXa)Q_VrGcfUZDtf5:7Ho%B.1.Fm15LudlCDb%3^W[_Tk<Vd;'.:aY["ee*:]g\#[;/5
%DX=A3)A<fFY+QXf%-d.q4Zk;cf=tWq$I*7+;F]"E('N/d+447l@!fk+JqN/)'PsBVb@)n@[TZc_m%DBsL[i@L0sJ@*@VV"ks/2:P
%oo7s5?!jj;X$:8__21HH:G3EqUnCbL$'0<BDW??8h2Wlj$?(0m(g&3[>3)$7Cc"f&,S$)Q%mrRH.!LF`4&DZRIH&#h-#UY`UlUNf
%HHf5B2sIZ8M+p]'@A>;&@@P^.:RB_(d-h5RVc@WB;lCrkG1*LZL/B03dZ.6oOb6.nAW-5-'ZD(jN-3o0SR5$YC%L`jXnBp3k(XS$
%P`']c>d?CeXk?;bQ%Mm<Ktpq$H_M=/$CTg@WV0i#>o/iDFO%bSOJ6E]Z5l#_dme&?*_.T353OF[;#'`@hee/E7YtSrm0#!K4HC_L
%DUDg3[7^XpV:$u[VHM27*f-(N(%4,6aX0BN!s[9C<7+AgG,lW=WM@EPgb'AojUs[1UhmAr6rg@e+%<LuZ;md`\E#pN&!#43R`@b+
%?Xra6?Il[:\P?=K^+6M*V'UINbEXK3NmXbp.@Eb\6:Z_7/pG'(U`Z,Ldnu,GP!uW3W`0?WLfQTRcr#\Z7GI!j-?rtlo:\,gT+[2t
%,_e8a*O5'9*G3,5Mj`8-#;5\u`pksS_O4&+c<e0"YZLWJXR:eEP;"J3odu/p4U@(=D;k"/XB)Ehoqo[SD$[;PK>FKkMeg_#bCs-5
%I<!Wub+3O['YTJM:K#"WThl3Q#q7/\\DuP/Q.`<@]B"#i=r@efrEF:P-bG]u*:Yq'V*7SdR'M'hhsDI\l6<G+[!Od^4#9;5`HLE=
%Gl5,crgfeUIX&G^l6Z*Gp(N$jSs9V9eZ91S#8^NhM>3RlCC"oG2\+,1'X&U&Y,t>oEu*dHCCp2&IJR^I*fV@NaDfn`^PWW*>]#_a
%B??FDN)CNV0Is$"-o`V!HFa^uAYG>*0aNj:\u4/?N(;Jo1o,bkoYp%a/S&s*;m.C)(th28$"UP4093;84gU#l0jIX:_,.:Glrk'@
%[EPSSDe[7/``3l$mI_US+OgO6WJZn4&Q^4099R,C`bI=fW<X:5::&kuAJ0ph`fj%2V1I$A*0&HIK9B!,2hE$W)^3%j.Vd*uMulUf
%fCL-r';M^`2O]\hAGB@IHK[k4P+Igr,pX"rqBTMo10&t;0>XOuU9P0ZmTW>Yd-N(<'(lV>ML=&/[49GH`P(G#@V%ngq75)'Lea!F
%=s%;^S"UgD5jNq%:E^&U>F!pmADp9ma(0/,/hMi:_M=2gjtRR>brCttaCtH0Ckp8o2Yu%cptEL``"f^t#DXX"DnD!TUNG(%eA1tV
%]?^6>([[,hMGZHB$!Dcr+[Boa`?sc%<5NecjE&HIV@D$:HgF1q*oCa4/#?\EWCW<FC)eR@E`1ib<BDJtn1Y`m*]Dn->]?p:&'qhp
%j*It.204u!.^b-u2WF5YZV!BTY=i?ErH/#cksGklBO8c>7_P>IRi!RW!+j,k``%AH*Y]&"*^JF6SL'S1puqE34T-KZ["/^3`,;sT
%<WK-(1%facFZu8gm:^kd'JsV"cc[=G[S*o'4L&bY)9j0\L.4jH"sOj%OaNNeKCpjZB^*s5rbr^UO6>GJhUM!_cu;#_bR^&5-Y:$6
%i7Me-$\q9`X-(p2cgp+>)$F4+U_:,aE_Kr=F:OH?YM#9+L&oc:5a-(8X`,R;odGJuWRWs\G'8a-_FU"&+)mis\1lpC+XhNLd\,cT
%hFSkCFQr1=#uk8(3B0(sCoHpheK_cWE4+fl29L[E9cm\r`=_rX<Ot<8@8e4XTHkr5p-oB-I$#e=b;s=;/8<qW(jiPk03O\T3JsT9
%3,gW^W2Xse4[p,DlCE?.a5OoTRM%Z/d;X>YCUTCoLMp;7Da\$"^(L##2!4#^*n[2aWp+iK7#c3l)r',]QOc`6ec`a1+2>>WiPFfK
%LNcgWD\o!+G?ui'YI1fRB?R4G)c$i#(?Y('</TB&D>EJ=VS'=Lp1ip@Y5<HhkMtCS[8sc4$Cgal5:9_1Q=[Jq?h:0'f'Tl1ce822
%Wsd2G>5O`$"Pp/]m+c9B;GTC?Vb^XeXKB(m_+*PFUJa:F]mG(!YFY5GkYU@KF3EkI<[[q?e%5F*E?SD!m'Lig#G&1+O6!E\+n+9:
%Zi7@YpC25.5I$e$%rCXA$;T+:QQJER%QC\s0CLc$DY_c8l?V@;g2]8ZH]VU%lPAWlasYOFX]OHh#dO<LV`/A(\lO6kI'S4Pff2q!
%7F-j=\W\\'SSr;EO70gAL1&BqNR+Mp)t<+;\,:Dpqo8K,s7LR'@.@9g#P#6)mQrkKfD,ZJc'%gAIcJX8>$9+p3HlOG5@=3V?u=rl
%X27?Y^&R<hdp$H8V,Hh'5?/b@T'Vtef>:]@W`J6TQfZBQVrdU:guH#)XTor[\Xe@7hf&YkelJB63REajH2VG/="iC34a=KKZD;4W
%+'+V0C7dJr<bYc#3+!FuPGS3+p1mbjFZ39<*36_WfiT^*P/Zk,q8J&,]rLd@4GS,BF))`LX1-r%/d*6PEK]5Y+E'D@)i`/S<aV1X
%/DJ4S5#JqQl>nYU8+QX27*>i27_Yta;E\2J^F'gTJ\Ec*=Q7f3h>C/johOJcKD-ta7cG5VW>-lah,q]V[pAjj_5"lIrj;N6o,3nP
%=P3PgXkE10D4ogreq6JR2Ab`Xj3rdpTf3K`=3=mBIjSu$,DPnuXF$f`.(0%2)T&Cs#\*el5*cO]JpB<+o1-1C@(JRGja6g2PWR*=
%I?6ZrHM23^=M0!->opb,\b[S$oI+p.<pJc>DO5NfLUMg\OAhe.h1A8\pR?*94RP\>`5LCtXe3r"f)09kou&!?>pFi>YZ[hLKm&CK
%*^%$AnqOE&/OMId8)hANFnb:P_HO!_p<$[tIIii1jEm/X":X-oGd-$15526mn'mOoDjH9CMbQJr.h<\Ek6q*c=LXlJbOEiD<T/ZR
%alCCpb$jIFmdOqgHZ:q?YaJU>KDi9])[JMnRJ&4:an7;eG<Z?@o66Yt2U:C_qorVdomT)@[2,i_n)6kq&mg]63HhiO7o'<9h!3mc
%!j_1!Cju8^.V^EJ=S33=eXkl/HsY\^Cn*W\/b/2;>hCIVhN9'(J;:9"WdORgDHq@.*kl!2Ed6nYh]SR2(e=?F^ND^V6=2BI;:mkZ
%amtq@`UWYg/&A-;c;sQ!E=b67EM*!-ai\e=EO&GU=!WXJ`=I=h]j'5eid%YZbBI^:e,/m$aEAXfI/<iAl1OZna>=.9S_L]ieN#,2
%EX,sCk*IP.k6p(\ak\="GIZBe?$h"0>qBgg0Af)TWt2;VO3rhA2]!CYmD9mSr"]k$%5plBhsQjQLf(0@(=RIkgt`!6q=&9>^Y6>m
%/GHIF"@V3S=7)X9cfUh44/bM*$&NO,*3C6]4"iL8^)`(P'ls=LrZl^^F,rrG0,0H7h)M0dJ,la-^foT7hm\=CYeYOFk"/Oe%r-6f
%Z+4gUH3aoSndVhugY35[4d6G)Rla_SX)Cre0?Z>c)d)/Ts6SF&`PUo;GE9J7fppp&F8<`0[CPtq;_*e$q@GIJaqOSoeQmNM]VP7m
%]\CJV?3+%jI,s(nEBArJ*a@TCiN_qhpC?S;\%h(i>P^k@:Ug%k)[(*++&L'/`&5O(kMeP3Q<Og,UbBADpeq=jcO.H'$h@]GhSXhL
%67\Ze`7Dq'%][3G(CTgRf_%#.ngXn#^t<f@&\LG)7\@10)B]RV@->p1raK=8`>Z2^LcWK**`6_*e,f4RICi*?TGoHO(rc>]ZOYP%
%0*/0!+a.pW'7!1*fLI%O(1>L-\UWs"LP=?aLDTJ1716Xq78Vn"GLRP5NVDgfiC1+oO%`pVk<'@?+\*QmrF=HKE=Xm$WY&68Kl0cu
%5DOl9d^*6j+3!H=*q18O],)8<,g\Kb9.,L^hP"kUQ>g6]A3>!L!+>PmohsZJG(Y;6PThTQL<R`LagJ&dY"kaf2Q3,h_2")H"ubJO
%68pm\4XqBEePi#1/"Xuc9'>0R<;J"T/Me??Rfker7Mm]ha^0fo@Kq[U=d)+EGEEurS0O3YC%bt"5qdOXH?":In0/^$k-[U/MQ$%8
%-+Idjq`)LDL`"\eZ1D(]!"WKL<CP.*W(3"RKu=rBqkf*S@3"VTXWaf#j(;q`^9`mW2tJkq\=8k;,)UV5_Z@<qcGs^F)3H^XZ:s:I
%5)e`r.6+&pd2]gP9:JLuJ5XImk:gVO.hVVk]r9aNY+e.?'Y*m2ak,2Zcn8ZGd`^:&#]fUnrlOC\0S,iRq_VLEnFa+KZm*f)k-g;#
%,.r2h0VH!1k>hs\S\t>?/(WR:#FhpS4u''\nTJa>T];0=?2>SRA5RAWfZ!t;iBb>I'ERu1cdq2`0N%:e)!(W]2`*(nnp[KuF3\\g
%-,6:#8e9":nJb7U[CNedioZjrroPQ>=[*77qt5SC\V&1ND=bThdX:Mm<Tp<a(<eXq(USZFFr7cFm15!0E\B?%pECidf!@9m25@G/
%44f-OUfL*kp;nQSpiJb#ZuuDlTJgiIP>BrDB5_+jf40.bGJ;UV&[o''\g,hCZM9fH4Itg]:BrJ@aF[4Rl!S:!^%rF,bFcF`+"UFc
%4ogjcIbS8f^p.g,k]>V%JEl[^;E8ZM:jI($(O2Er;9468F0ng?.[O12C3-:\M;K,R-BGk`H`I$b!sc=Q)fjZp5,`qAf\4[H6-r>0
%=6N``+Mpi6=31/&npV:nGa(Eu]_@e?Gj.?e!qt]5],PAnhJFfD*^*cZpk!WTV_DGW*p;c-(a*%=rV)nKgNu78J6ndN)"cHh_UepZ
%(^[f>d*5!4kftEMpm;fiSlB(;hFauPP!E`#*^8>/.?tth^)T9CnltS4ankhH9cIZ4^#e\U\,5a9]oRfY.b!^MQhchH%nLGf2CNK!
%/!>+9g+Zn@p3H>V3RpCg]Z=Q^nG1Q3>D:=JpPV0Ne9iHkeV2aN++.)BH+NuqD[g=MY4c,@-+`R-E\F%,]Ir:6Q-C+"br>&m8C6PU
%j#q2@fl8hAmJFdIpA=Gc)eU72/3eBdF`_0XlVeR<R!lDl^A@p.OM-jFH'^6VoQgDjIX$LZ0E`DM0WaAVX_OQ0H&c\>rpiV)<P$b!
%<.F@(]/CYabeAJopiZ+rl/>I@XZUrS'0P-X)nki0m?p&g.XqWW4D`\dYAOIt*ZiUNm19TmKYMbZf'X0JK9m]fTc6h<e[`Tkk##%s
%YH>IKRn^irCp//+jeTN_20\hqp^S%TlK3-;.XYKB?pmd+,?`hEHjQg,`lVe4=[_?q2GQ/a%XU63G%.R5JrOW8]9>I&_h4>98_=I4
%jMYGfP>=CWmd4"U$@2*RrSZ)8:\QM#3@$S8Ytc=38@6!mi8jR%UGK6P:V6GhIX,pMq>&Y687rscRt^]n%W2=S/iLI%.f#pM.r/`g
%n)B&>95!5H0=\$!4i"2t6S2'j4S2JGgZu6`O1ZN<jLMo%U?fII[GGh?5.E7A'(O#0qN.0,m9AIq%!OA>q,UWYH#e;D[f!QfQY;@Y
%!XB`t@oD9d$h*-iC-836FZF5dZfH7$JA_+3q69[(LC=T:CPVZh_05h2iU4s8#jQPTk7Em8j4g%n<rGtrj=l(h\^9!rk.J+WLX"7R
%oj47*V1YhHF6=ZOK:AmSo_`k"E+]WJ0qdik0+<>QI]^!pFE;g+9:qM#TD]Egr1!RTPD>FP_^-FoSblg$I!epR=ufgPn'umZXTiH&
%]n)+8m;XS6^I+6.F8g1N1b501?I1CA["!>tgL=U*&_u^L66,H1gMm=X^;U[K?X0ecX:rIqoCM_IdIN3>CFdXp>b%<:9')<;Z>kA=
%Ol^WZpfh);k*u+'Gq4,h\$-IeoA!cg.+YHu/`3iM^/`aM?bEIT$IZfR!\Mf3bJVc_&&:='h;&"gg:'6IiGNP@2_#>^gM=ud\Y=I&
%hem9nhg#)ZZ5b`)XB%q8o%U#>]lj(/h78(7caReB-F$kmk+=io$(cMqFL601KtAF=J_Zj=Q"RRI-i)4qT3SeZb\hs%<4RLP[?IhG
%K_JpJhX.iu,kBL1j/)LphTZfWR"'ADp-I[$efFCY@?M-bDLVT=.8_5\ikfVV2NQJYcS+`NE'E=m&+A<;TpNgS;7enN`hmH[LP85T
%S(Hb_QOq<'>D8'l-SQXo[bhkk$\r%&p#PWIkIJjTS-nsc"8Bub%Ap[R%4X]A3g;t]:de[UhI:ol0J_B(3oEIj5$qNBe9nT/X]ouR
%Zk9I5hsEO3GMh5(p#P(%p[4]blIkf'=5/3f%F&NMY#irYT7_'ffgmlk>\g!]I#@IJ3FH@[(:XnDK=HJDiSSm?C@0li]h\"K4&Ja(
%o##+dbP?01=QgXW4:(m%kGPRAAs(mDEonZM2VO$sg&']Qj"&6Yi+Y&uI(qEQm!NNL(37t%9oA60d1,J=/jJ5qqNud+CitRD3;_gR
%@UW3*bSQRdq_nsVhop]s3*_UW$b8dnEj"ZSDH*l%G<m-Ip[5j!IG.3-Ra"(O^:DY37]QpQ]m#/fX)eE"Y9+Qugg:WNkJ"eOJINU[
%Hi[i,m)PD$q*+Q9n$)tp%b53u+h'?g5[^`/k-o-:i9]Lq>D<"3mQk9al%5FN':u?elgNYs.CEm."<Et<Zo+7M#IcU3nFL1-FYS5]
%5W;g+c5+F45=1K,k9?h[3mYA.l`W50gW,p_TST1F>b7;4??f7j!%)$"G=a^u46uURP='*FJtTXN[#C%<ZWuPW`I2d/,(f7Eg-1fC
%_X'G8+)N6MTFD@KQ^ocNCje^l@rCUr%s2mL9pG,5'KuO(XPG3:7;oo_[G?6(`S#!XGTY%]7cF?["UV&g3sV@s>*ZNm=2LX&>&Pq6
%VltE;_Ob_cA%StNE-$Q1Io27cb9r#>B3RY7bs\`g5Mj71Wasm+2c&)([,oQ]p"E.?CVkU*Hd^EF)!`.+k)H]N<%BV/m,\_gYO%/_
%LtBdff.(W6@d>mn$;9P^=no9a(L1hm]NALrhq0OLg_u,m@qbX'A#Zh\gj$-W="`L%\EMnB2kN!d?aamUf,i]bTX,kqjRMiNJF6#R
%/YTAIR/=+W$e%NJF)hDnHuf6+=QJ5_'9`!'lgENESSg5gGJ!2!N.=9eE8@KaD;GM;Rbb'JJ,QsfQJX=0`0VnC:ZpmK\APr'HXXI"
%YsoMXB'7J5%Fau8]67hKEN:\Heu^]*ha6bmrM'utk`&J7,_bj=DTCK1YdHNJ1VdfU*A0SVI,$<$q/"ZEd[V^ci-gcW*es!#2<]cS
%Sekn^3r]3FipD-mjA,<4loaSr/0%Zr98RO9T,16',OPACq=B4@gu*M*NuR7gh#Sb:/`tj#G8l*Xo*cY#SA3VB?tKPoHJ?EJC[HIe
%Ds!ZTrU_Z`Y("+<K=!9akj4K[8<T$,Er#LLS[<OmJGKn/"8:eIiMc?^Z*8C14RCm6N(l.h2!fe%?<]P`Tu2SdXnVhRa3EY^gme5@
%GGc'HZ<2_OR2h@Q@]?3OZ:Pn,S^i_+&$+Rp\\5E5nnu(okRAh1q+V"hq9hb&4Fb,O<)TdBB"7[9A:"t]^k=PDe,f(<5loM91$:3%
%DdqX8MhTe.\bBDNIX/4uaEM^4g\MQ,OLpGH69Vdc)YNUVqYA;!U:+3Ng7qd5.EK,RmU8+N:[)Tfjiqr:?=@QS]UV2\Ledp9i@Vae
%HMLn/p)?)#jJ-Yfc=>S$Qjp4jqVB\mc%SsZ2k[`fMg'>Y]g*`jX?b&-:\2VF_gPq)7o-SM*AtTn^l6q0P,6bZ,G\mmE:G)BoYn[!
%fm<JT1"\mT6!uqS[\!-c?d<kWW`J5^^%)f?m&PiWS<sQMqW7]CrooCUlXJg"C/=[%gI[Ei6t't'/RR(R[rCO/Bg$soq"0(<9`kLT
%>4Slo(fEQQl=QNXF3i_#o6X".P8s".QF]">q_+O#LOlf$FJWr`n9VXC_l09Hc,KoMSo!N3`p$Xb/oKoP2ZqfJb,nq/>C-[?=C1&Q
%<SlP(i%#EDb>4&"GN8Mn386+&0]"D:h3oiV6%'FB:#J=N\Xgu0I;mA&G$XLjhCK[#PgQOWXC8N+G7aXABZ7+I"NWg,[?]'rh;$tD
%3WdX7$sr_W,3Eq,)S*'`&!.`Nk&W%g/"^.MX8;O`aF?8LAEOH&CJ1N^O;iOX@)U2;9Xr,2h(7@7g1eQp=4nO:!mKbfnnI2b*\P0R
%Df=K7>[KOmQ]&>*dl/iqmh<>`Ea<K\DLAt+q;?_d>Mcs)==9C&h:T4j^gF%r"D?ZCnJ6j`kCiI,*rQhE\$bb%D<;!B-u*DcFEOcY
%M<*-orJ?+2p#p"ejJAi(VehjAH?>LqW$A6nOs2FLo4kn$/N(-4rj183p%&U+Um*t\X9'odlEtP.M9O%dSS)l]a5<+s:-@YHGXYG]
%C\?R-Qu$a2?$HUnn)8/ng8Qp0@BT'8F0q=EG]1k]?*dM3%_+&CqL5pD*PO^PLSqY\"7Eq1Xl2dC05Igqm%!b+^676r#ab#C_c+OF
%7W\rRIqtBE1KU\"KU?BjSZc37JEOiqApk1pc/B==82l#ET%TiCFFFiskSMb<\*\GY(#]+oN/,3>@sn("*,)'?f:=tM*K4p`!sPm:
%o0A(Z<LCA!,H12`\qgthI"[QYd49*Qs8M?a\jKe^9E3/(m0?eY8N4!>])8X9#)&:_/jOUnclhX9pj4CA^d):'rKBm@U)u'rX=Q",
%au[N<Bf5_+&]/aBrt!D4c#@t(8[2U)L91Rt>\M9<&&e)s]"IqfGnG\t><Lo]AN)q<C\-+2mrnXk0MT)r@*.u!<]t9X\X_bmV_<V6
%YNU/CJf!L\lk]-fKaV/7h_75tolh^n#&!R)p@2<Npjr`\oq-RN3:M?Bch+66SY$mcprRjHqb*[$2CKBU@+$$Lnom=Ka48bcri&)1
%G1GpkA'6UM`J<%LQ?k=Uf#sc9'X@AuA)k73X&s.Eno_,9m$ds49Wj558G[mZD0uXh.5.nN59_NXr")D'"[9[1atJ>>Im@]sKQ=AY
%n0A8i>@]lG-&Oql>J>l##7*c>N"D#)mqNKZbsE'b^apk64Bo]K5"c6cXK[qKYD5XQH^52Zf0tc0\4'$pMIE[L"PgPg>fF)_/1^o3
%&?H6$""fB]a=2ZoQ,NtaWGgN#(o!hd:hAV$3-;F@&m,Y,@b['8$WI8pST\_'N1OCp<<I7/-O=R;4]_^X\_lV]*)iWt($VSHkjtT*
%ZKP:cR@1gVH2Aq>:JthY;L[l\Ehk?#MiNlkiL?L#jZ9gqjMCE6/"nR6>PKg#s-AJj5rqgJf8"9aZ4:iem6ZGYA&lp,Y3.!2AR0]/
%#1]'EA/5paTGF3G2GdVp@"?02mD-gJ[c_>.:ZR2*(#V##%6[l-HPCYS[_QonDuc8L&F*hTbB>,/m/uGM(f4uK+pf#E$k'?NR#=Lb
%oJA%Xf*9[4/MBH#'`_,4lp4JZ8JMrCY7s_5Lc2K"fRsVHA:$QpNXI^\TrYdjNP:C)nmK0qdcu>dHT-mE!%T,]aOQ+,&mEX-TVSKA
%>G\V,TAG@2@*+K5^si@U6WsbCjIV8OR'jb>EKl)k#Uo:qCc'iHfmue(#n0NAFo^^R,++u3BF+]M$X?$M_L%`eioejHolOVM!;<_,
%BApu7"rn_<%58X5;@F1p.)</?@QG;B&aXkE%OeW5e2/+k'(H>"_"RoH]I7S^eU`W)9Tid;nK>iZA#!aLUT>[pi-JO;HO?5V=m:ip
%&SQaR^eqsrHr&eVZU'mK/./cOfI0i5Ah/X<"6e1T&Bf;2BHLptV^YnAAZ>k;H"7.$2df3b*X77U%%n$U$P54X0Ff6+M<5Iq!JMti
%l$(C1?qO<o)nN81>*7hbLT<d2,.Bl5Wt)$o-NI$592p-rAc<am"ERQcDG_64$I!%V'd?7T/Q`ru(?,(@=3smUfE_kt+Q+",J4Pni
%4q=4r@8Tl@abm>,5=C_YVPI$^!krUuo(?kW@B+LtM(t7_1\!i]%eg(b&TfIFYFn-'#u_X05=.(%)3b+P)"]i.POq$"P<f1Nn^%d8
%5^j!%,Eeu;3#*0-+AmMV*uIQc`A\qH\JsTlJq9^LBU0BfD^aEK^_62!eQ'NUQE;::LFM(Qek@O9VPWj7*fuOJ:FM:\*!]&*bA#ut
%q#`ehd^qbrQ6!cXJFTALd*_DCK%_?a86.].QuW4H3g_39LKt*UO$G>=-d.T)a:+-p\r"!N#RCJ8NWIf6Pl_OLUUi-$Q_5I&=@Riu
%#'gLt+)<P9f++9++K>hE(4Hl'=9g]-WF+Qi7:V?DHG3?;JkAi[JdOul8`8^EILV+`"Y0A_Jc_@_-BN(CErZ:3^nkl)bh':#.rdkq
%iI\;Z(=!^]Y/MM;,#&TN+8$"W.5fW,SOeu7#dOo"Ch<Hc\;-4oE*H3f%L@;3k\IO+84=ZYeTD18&WXB(B-udIe;dX-JfZeVi=Xch
%1h&c,%7;(X&ip$b:)B-1[0Yo^B*q7<K:JmCE](q%M,",L2N(-W8^AOU)+PJKT8i0!g-o-OKf>uSd#,nq^lg<A/J.'-,aOUr&d(=2
%dFF:RQ<^AIokI\3dpPS0&i;?Q)aUV-+W\sp!U?Ui"9?M$"Tr=$cq=F>dWI-2Hs@4H"f@rO5`Pk*AuPg2%,u]U'\$fZ,hO!1I,+lA
%7<)U-k[;mgSfH*bTU.pb_0iTZ$[f:#.>n-?[.gn*9bW0"P`F$<O.1N-->VKp+O:T`$)e:bHC2hD.9"8$jHTb-YRJVH1d;PmLb02a
%TaYs`>tokMZBQtQ73%%70?^gIU6!)\_&srP!8SR<SR/%n(0a&m>$Td9MVLkDf#BA!Xmr.aJsNM:JsKpJ#O[>n:nR'*0<-H%%7RUV
%5#[%;1"qnl)]&VnM^VEDL_@MCB.`@&?h\:TJ1?j!!+O%\+AXM(oVJKnO84*s^TLC&ZO<Tq>/m=]Cd8h"M6p8^:hs]?6H[k%4'J]A
%FWNWuHZ`7]UCMYUAhbSU$Kg$p4D.h%cdClV@N!PMlmq:5c2f4,7*NUC''ckqC"p'3.0,XU'P,#^+N&=6;2PLe-0n_ilGV7_+n1Gp
%NV'4#6Z.Gm1\V9UP@b-f0cLL%UCWKGIjrG0/KtJHoa1TTXJ8T[\S<S6-O;]r61TZo!b(?O#7Qm8#)foT8'g1^<takO'eCAa6MdX0
%4bTN+"fEDL@+76q1r_509EH$bNn[bP\.>>E4\`pMh)e]!^u.$%b2\XCGcV0;1#u5L$p")<!TVmI9M!i81nILmil.;r[D%fT7s&Ah
%=XOsh73oC`jO7XZ_8.j,[V(mB8DWAVHgDd414$<`.,R"oC]8K_EiCW!4\5iLN;nL#-rgg4"<DaqAWPho21#A_K0hs;n0>(pr%7\>
%f>^&RXJ>Q/E5T0iQtHPR&R[O;]+bZ>HF6!Dn3@*dItK3OaGW;F)J!WF'6#P];8Eg5=p>S@phq0KZmZF0+IWlH^i^rl)jfJI4X[Dm
%0h;FP![s59$Bph325k8`+aV4#-T7`+E'2]lkTbX`N4MN/K:+,F&e)k!:8&C2:N=k1$$!XITbdeE*2i2Aq+`E'4uGc[36MLCWE=6n
%;O)if3rFQtO=rYF<8kAK%L8a1ise@cBTN?2o)kA#.#Q"O/45[SN%kBiUnEZ/;BQne=9(Vk!\oNckt(04prDLMN_=q3>VTFf5V8`[
%TJSXX%Uq7[`D6pIaNi-CqYukB)AaW^#keG+/e/r(5@=cP$,OE5LGjL%n,a"-pYhD@0YAVW/*^sHA91]1'Q#I`Pr#cKL*Hq&;6MGp
%F6-om2W1fF?k[0&jB[]_@Fu&dAi>m8=@L"k?<D:p>Z,nL"b-!d!Ru:Y7"u-BV@Zl4<*]R/"Vf/b2i&^.(17j[OPYA:%Xa$,NoTG%
%Zu9`j/[6n]/4,hg;!n_HIH,nhg(T-WY[2.ZD$=[F.g*A2TFN"Ua<;`E+;7&A+Y^\8.np/!@,+qZn2?+S-5a*JPm2lL:`>;_@3>BQ
%/<%q;9SiiF.k$qTA%7;=*r]!%M>:@(>0nb<SN2XI67!EMc0kksn'@3VDj)A);;\Wm;Dtg=HN^i0%bW`sIrFOK!A+J^q2"oTdUcYk
%QSI]9;<'A#6+=59i?5G6,Ziotn\ur5.&Etsi?3D7"/OcA7L[p9D_f^@`dlGI%57ad[3$#gmPiZ]N_5"7_%%06m4&#@El=<O(BBhB
%".bk_Wrl=\XNqrIYE9JaI:?mN9oQ>[T["@%[)5]Y>96=S+*kbSbZ;!c^#VRI#A#Jr->kF;R=;,Q"I6L[`R^Dj:4g-@A>;Qk)A#OE
%1VgM.1l]#U$hGCPac-8s7>Yp\1k*6>QN>O,:EaXG%gYDG7FCGM4pae`$p"Y*V`ot\`Uo)i'o<-HO.5jAIhCc$8h:%GHPU*,,V3mg
%JQu8,<UA@*Z_$H6Z=^-W*$`II!8>NH`HidNmO^."i:\G)kQARLj@tSPiR\#Q4l+8,Tl4P<&-:bjCl)M#XZa>VJd-o$6bWf;`RD?d
%N/JX'd+^88/m-j-7nI"P!Fi-,#4+Y^gk*?+K&lXYV?;l_`#urK%ddRL$A,YnaQdIl!pOUI.Vku@mY/_-Rfd*<3]6>,K8eQ[#8e76
%Z\ViOS*Y'&Q,2^-S(28-Sl>N?j>rDoC")HTQI+3H,8?D#,>BL*@G&Sc",gNXFVGSDX+Zu8EjEAOb8k\^X\Q0t:FO5J+&o!o+fm%W
%0.t_?T'(_EATG;n7?^_BkrA[XK#q!2?V6s%<*]D:F*aMQEI56O3?qqM9ceU^D@^et('<SZoJ!1uR3kZ>F*]5l71XIZTHnTud"n7P
%js$CTqb8hY4M\J"R75n7hdgBDH2X-E4<Yo(Bk0t8pU7=)544B'&O2s0VlUrBPH`JK'_SaZG`\*_DdrFY^f2tn)b:K\)IUKXEEa$u
%`LS?$1EKh,0UbAa>lS>Igj/k/doK-RPKTLaPE6DX0::L]M?dC$@s!Pk-t$0TJD2g>e>#+bomB:WNT#mDmG;84B"Y_p5om;bJZHe9
%.UKL*C,X[lRG;\t56CO2be>(Z!GIST)3D3_8B-!Fi!46fb&Pq#8r>N&rFBdTQO59e6DFCu5XY4a49g-q%J&ML5Dm9bL7=(oMNUfn
%'N@@2o\++nd;Bsi0f6oSGsa%md2&F6JL^rP:j@L;]dE6m[Pr)H:rF$B-p!b]R!r&0Y%?p)dAS0W;kfrkg4>;N#+6bXG0rC1[Z9Ig
%c,g6Z;83<G[bI(D1Q2an%;j&.>p,jRgEK%uNZ0rGWBoHPSfE+'Xq1qMU7d\u4\R.[-Rmnb;_fc`UIn$heDkQW$;Z:S$rg_Xe/.j+
%Ho0"4!2f'Q:BuLe`pX^\gkUd0+sNrlg]RW/bNCi-cH!ip>O]qS\^iKUbK$_E8sd!%+6Mq;6)1Ij>D=4!p$.HtQlZ[m<@6NX#310E
%`*eG;D$:G59\ZCc32.-]BFoUo<\f5K$8j)d@cRu4%[t=4Zg*61n$ZlL0fk%m!csH7-IJQ<"Ti$f89Q&j32afU1G5,`%lEN$l":2p
%4nUuYYc%nVg@b^Z8[Hnp&KMU90T-A7Fn"SuN<j_`CO/2G&EY^`"Wh0B;Is-b_fmXRe)b]ZZ\t<t(a6B)Erarko'X&CiV!jQ?G;nW
%B@!Gt_/1CN+OA(.1GfR55q1_.L,II5EA4X_.eV!$YH'=Ljl>2H*_[+f\M+Ur7u[cD$IOnbI@i;tl"kqPK+u2Y5ialMEAcB;Nki)O
%9Ybbt@_::MpX-;1$:/VQe%#JMR.LQ,1I5ss[uJ".-qJ0siP\!J63%UOA>5ED>75#!e-q+:%3ENhl#__kPA&!-*muubM$:ch(a_B1
%R?0'q$6Ao/pm`SJnpKF,+;btEQaI>T-Yk>cfh+AI9Zn4to=`(Y>\oV&:f%@T##!8VFesZb&^8]u#'fLPAEMhW'E\P$6n:;+PpjIr
%BjeLk9\2$U_FVAXXkG[(F0e;mMU+/VI3J5DojK'KZ@=T[)d$<B[#XX+9O>=2`m[$PnGP`740\&O_'fGsS0)toihHVJ>o2!"69E>`
%@p*e!Qr<"Gbb4JOAK`VdLgs=aj+.+kCtu.j'/'E_1G!,LD(Pk?#+DJ>E<?S>4=n;6+YA[=$]b_S/1fO6gNkJ!^UO],`M\ld(;T!l
%<i8<s5F?*IH/*]'.AOaF_;dHF@c/AEq(*7kJ/c9@hT#.0,_6Zt*.`ukD6oXe@`eAsJ.`?k0Ba8!Vbq[XA6ZhlJ^;mjaR_f9B"8QK
%7hqVWia[)?VhNl]'%:2R'q;iXAQ_(A2k]aZ5j8:Bad*%JVX;15Q2NL.($-IibZG32!Ska"TNnKc16.4Kd):*5_jZHoM!Z>:&.D'F
%j:['X*\bK:DXnF-0B2%Ef.l&uMP;g@aV?6uDS'K@8jWY(a)OuOjBa%4h@1,W0'DS@B..0tfQCF.<ceT[GC'G4<^sMh%<FZX,a*!]
%$Xt"TXbKJ?@*c8<J[lO;rLaJN^<aa^7uL"!El3uO0:60S&*u/.J],3!!ojKmd(AM)"Z)=7@pfe):e0\[;,=ocWQ15b72t0&FFZ+(
%F[b7)(bi*]@)+&0$&g;U%!Ic.KunB&V7'>IqpuiobYFgIDKH)W`(&0JjFB8<;%$(2,DQqR=Y-,H_J+9e^C%O+1ARKDY3X)Ab`qAh
%:.kd;oQ^pARRKQifn9^!cI!hCR.O4N>'B.`cA)Xdiu8Pj=\7bHP-1i!)5U(R8(-=CGg)8/R^4Q/+Y+cJ1!7^_FXA:B:eqRb65\eI
%\gDjZLcq;;mht"(c[Q7le*]6Yr(<Ii+/`6KmJ^Q-M,'n4G_4VFo/]dIL>ieKZNO;Q]2j\)/<a@T@l0C2M;`^QCAY9-7YkBu_F9T;
%3s5VG*=A!q6bH#D%aG\<GSVEpM<O<_,,P*.10Io<as@Ur4_ZDTI8BF,Lg+^Wk`,5pTpLWa1Jn\p#e18SnM#gGj@UP+&6.(4&ZUfC
%(K.jW_SV*VV&\OX"5[0gj&')kId@9JKaB;!?ns=tGTP-CaNM[6Rec'UW<j=$fQ7f9n,fUsCFIDJEg%UCAE"7DkG"`R!_L2[>^15D
%;\"d#e+Ht4o)_%?01`pnVcaR,2WA.jOCrf7eW[Z/*Dg&\A`<m%[_#f"'_aI%d'%]7g_[EDi;jHnje@!!5l$q[kM)4r#h9ZHa=*,B
%SJJ0.L?'5)H&bIl4.:C63ajNu3QQ_"5?Y1+&9rkB9WoTJ&:PUe)72)30OWl(*2I+I@4.df1324G6^5,h@o=_HcaBO\&sS\Ugb'X5
%N7+RC0V9<o#('83Hn6(pg*4a`*1`kd8Du93e+d$Z@n7%@LSnfn-.p90q1)tfD?NG7G'kKQ4Q58o&QfAaEYts"M'B1&0D#sONh<j9
%V_g_+J_`jE(VuK%SlmnonXu)U*o"b5r^RYdE#hUT'4:i5?_8"P9FZMEG$J<HC,40`9BfteM5FlbH[)^26'6](,-+l^Zft0H#(6Te
%d,E=ge<Mg]1"(f5S+m:`9W^^6%jS#^M\[OWJT8p;l[EqZ>Q_;qA#s,(<`IRW>7[hG-?aJn"%W5[_Qb@Jg#Q5#ZstNKLc6>%o>i^Q
%lOC2:a<Uk)BFci>*.9T%^lmIVJrrLB0F`&5<6Wp=_O+$Z&fotC*Zj'b!_#6"(S9Io."_i>GF)i#Se0;K:1u8al]5\V&P<7ab;L91
%9Q5YHd)\)Bk:R[`+He<GKuZgG,0nVmLoWtd0SPrh-6u&A4]g*%4@dqUM1\a.Q=KXj$jU.-ZOiE_!ij-r`np?p-%SD!nfo*3Mu"J:
%`VQ_dT2/Ak$mOAPO;9=n\Qj^K7tcGuOWZ?E8L9<U5%]A$e,AK,)V\'Ap!?3"fEe3]BCRu*>G"A10_TBZAFgZs3\M;:;l>"&MN3oL
%1OdBnVBa(gbs$_7$OG=Fn!Z%-I;>Cr019TG:0C4)d*6$qG/7Q#G4L:3[^2:tGYI!\6C*-Z:\p4G;Fqus4H+%g9Q1D5@RS>glPqnH
%S-Fj7Q]'i0"j4s-U?mNjYrPc+gkfOfAE3>>`WL7t6pfSo@D8m.:-dDGYSDg_osQQOXsp?GZ$qfW$0F5pC5r4?J6-)#(e@<sp_LJF
%*XZ(4PK5XOOME@bBLmAoa2a]k=qGbU$\</d!,=bFGZ*H`WW'<k>NAaQeBd':%Mk8^_%d2t&g`B<R(*rb3TEqudKGpXGWI]Z"[#Z;
%W-?JZ4ZUA;WuN5A<)f>41*np.r]QgsUrC5RLaQ[-8Sc5T36!<enrc1h"fZJAW;sEtWMIN]D.@:&T>7@a(R)A_$IJR$U7UCZK7WQL
%iH/-U.)mWne>4roK%)Vjef>3CI%C>@'&1`W7#GfMGi^P1nt3fI#dqH,3s0ZC/9V->'TBg1""-hu$kuCN0Un46&LN+n49.j[aG@a_
%H0dH;_)e#!p?<0AU\.@U\00!_:LuoZ;b9IaLmc)ad23$1i)92CdbRfm2@XL<nNEpZ1l-"npYalM-m\$Ii]GNlQA_?KAfTb[h4d>>
%c4Df-Ni"SEiC_dL76i"%NDb>:Q[$Lro(6Kqb+m$hcf4W"o:JB!/e5!HG]8[S0^A.F=:?P*?P>934?T0)0ZC%(?k/c#-lMd$G9hem
%f/(q\nHb_D"ZIpKh'h,o6I/.=N-^4R%.!>KGUIjDP3agXJ#9.QQh6Ptl*Ub`Ei"T0##]/Y!\G2OU5g$,TqcCM8r3[,DWh6)+g2^#
%$NbrW+=$.9q+D4$d<06c@3sL-J!GfKZeN*;!0.F)r.-/.WrR>p?1aW%'9dOBa#;Pcomb=`!H$d':96s&=49tf"6Beg!Su7YZ#e%s
%oJ%c26$+A;4L9e\g#cU!MtVF$!a6EC+T'jcO^c,.<4$q$k-J\cJSSp$"*W`r;-g#No&+mGb4H8+Y[MS_;$Ma_>o!)QT[SfqEf.9@
%L3l]1J!??%ZQ6VWC"'IW^@qkm?2P)/74AHcNt4ds>YQUP"9'^J0WIb@D#m6M`;rDHs+1:K&Q-@<-h\cCZrQ-8+r)jhV%2d9ZjhWA
%YI7;[F;l'O*!5Mbj#iPrBZ/gcmp<SMKT/:3Uk:_DS:W@'eFPGSm85267P67KC&qKaRh'!Kb1!W6hM&PrLqPQ)qf=8531%"5kCH9?
%;&%[k0UDkP6$p[\]\gaoRRbc)QB[.M61\e+[6^&0I$=]'52lPrPBbtSpiI;n18CU?@0j5'QrO-uJYuG4!ai8Ja_sj"!Coq<E5.]b
%7<N7C3j*';SXX.emS^hDC?:q&l1tG_\Sf?ZPcqo"b@V&iqmmmm<+IUVFsr.:-'uK_-97*6;-)C=7gEt$)4YL;`tKIV(N^81f\`%Z
%LjBr6"eu_OdEhuD4,u_LX,?1LASg.q;9V'b`cu6Q4m?W2W%CmK<=O))k!of3M,i@5=EMb>2Jt0L#IZ_dBI@DOJTLBTVk>A*<hc>)
%Rj6Ql5RX?!TRmURb;EN!Y)f/,g'4_:jpYpm![4-UDo0,.N?(<]hWYQH/ndi1F[_B^ap/#Sk/80("e.j:`$k&lnM,1tg.+1B'&_ml
%6YnuE!k9:X3IjqdjjVF-#XDgEa3>$[lqCNA79EI/k'(EkH]iUCB>QF?fa`>a%ai&\UO>kWB.lS"-bad*$mS%AV.D$_K9Z']I#OFl
%#;eL+E\bA"eY9sq(1-+ARqG&j^>:p"B7B_B7*?u5.(U8Bji8S9$="[jD?7b64=sg&NHp#`?/W']_M`"-Y"MjG6kN'&@l,#Sa4hkA
%W*p;XeTH,S"AO292$8pbHkFmTA[[El.@tKQ-VEP?=h\YQAe`.h"G[d;\".D`+CdC8oG&C`<Kuj(DB^13a*S=N:)hQ^7=MUDit:fh
%dN`WuE'X^T4+M-Og'iQD%YJ`J\M!=G"Pb24I#q\9?89bZYk5q0mn++MNSjc4A9<3WJd6t#S%crYTc!BYJ-<+Z)C=4ob7NWGY<h.C
%C0"V<8'$M(.)-AmC0S">XuM(CTKr=SP'g&4*K>2I8$M_)GSJ69',5i](5?k+-5!*H8T!4jiomj)*DWDL!okY+qC-`]6L)fO:ng/2
%;@6&:\VYn'ZYFXXiXrt_^o/96:Ec3K.9e1W=h)^oie5!A'.-[FHT&$+)Q/rL7eW.R.*7gM`Ya"ghatBK6sOHt69?6ZhnjFVF<=0e
%3dT2nYof+MCI)Rm[9,8.hj,1[d'H5o9LC8N&H"-I^iI>;kp0Di*o>i@7[O4FP5=AM)`*?RS)d$g?Q1d@bOk<C6;n\sWeWlE8p'^#
%CbNVIF^uNkI"u/e5":Wm#B03G!^_#2Z)o7?F=p'NGaB,$$?qK)/^5?86&`$"QLI.-\i)-!fh6mVa&@'p(Id"$*f>Yp1.Mg:,Lq0P
%'-AN]Y>HU"YKs@>-iE1O"/T'_Y]QPV$#"\u1+lsoEI.Z8#hI?%9&:g#4,R@^db&g5\FCgIKh2];5[^4)Ng\-.M.(9T&MSefF&`>1
%A5go9D-$.#171i)Z94ho,m$YFnc^(VdCQ<Xc!CsZK"J7,:BPUqct1uJ>pmcW/2:YMm(Rg=BL8S\%GE!8o]\$_+lQ\85\Tf%,2U)s
%'ICD]h3!#-Q@k,'1O"8%8;E!&D[b.CWJf+D%<X*u%deLBlMXm.,Iqp/b3+j1D7WAD-d/jVM$Sh4:q1g^^Z18ig@F\u7PE>Ulq_=#
%JYtX5.7B]^08[=uP[^GS+Eu/L>FW%C,F(WjbBJOD09/I)"2-^Lar"2.TU]T5<"NI4%XD)#,=[i/j3SB?;T)*@1i;!rkI>>pC^:FM
%lhrJ?+,];+:YCbWd)2-OQC,Ae8\,TD;pp?IB^#WeBV9:-c;C*_bN3EBICrBL"UkH1p3I`7*/ft`DE&JU-BQ2E!q5!4)Gpu6SnNg&
%b/@7FBpLp/R>#mL<!!^L;)XU3IuWoZrrU)f!gAUY)X?'X!m6JE%])M`;1h!1%nugsYgpXI1V8m3j66,D+4$h3o"%.8TI?;[V8-#+
%;=Y(3Cq\)Mf7+aPYRcXf_RNd<].t#@JZEpYoNbCUG_Io)Pu7CDA.U'ES#nZ]k)1c%QT"/,8pT-dpTt7idZZ#lj="YOrm@De</Nj[
%,K#,GR$'*#@dD@HFi`"l1SStiQ3NL?U5Rup0DcNt(Gi$G>sL^fP+BB5e(qi5FQh6Y>Mrg*k&Jg47!*(=cM#-9`.XIf;9E<4cArd0
%pOSril;bl-?pHhnFII'^\cHa%ET42eL(-[E=jf)tJLDlK9/B3D-4%I?i[K&.Z4KPe7LU1;&`Y'GO/$:sZo)M?R4hGjZE$8XkiS[s
%145c=`A5F@*+NU0UC\7s[MY,:?95,_mK1-koI4($@qDfYl7*:apirB3K4&#e$_5#b[()Gq[N!f*D8#$]m!qACT.\&[JZj^XJJFe"
%Z(sQRljN%r$T;BU,&Lg1noc>(:rF=*![C3k&i.pqrPL!K&P@q?fu)j%PgdLG>XFR2.H.P"9W(tuaW=A6*YJh8*pVr:UHc0.9\E)T
%-!0m::5V6A,A>t3E+0Dgf;'9N'9oLf2eSTNZ9geR6s3'*Y8;gG$>L32d>6h92Vt=O/#,qOo<%ALGDo&e/DluO!5HTqFOl5a^g)$?
%E)WPhrg&JgnQp3U9edU+*3Zbl?B>B^c/?<HL3%bP^^(;KN5u`Y[`b#MX%Fg7PjmrNh(,!TfkA5JT.%oMo?FgJMsaOJ(kjIH5Znp0
%!XC8aOH8"',07+7"qY++MA/QWRh!s-_'2NZ@&5hM&1oDn3t6l:7gVeE*!fQ9*\aKpq4;a<l/Hlp`GeI+L`_uAKJ56'kXnDJR=u;r
%knrOJ]/K7&fRe*KhCut26X)rc"`FX&7IS:AW"&[^8/;)i&(LUT[k8c<[h4;-K#&,_!WeXsrN*q1#+Qclqn=9ECk6)V9=WCH#-KCg
%8'U:N0"@OAI.AE,Sa\WPH@6s:)jhuopmD?/Bo\cD;(/^flFEdb^+I,V3Lps%ol>HZY"WH7^s%Wse:'8,^SGsRf*.C:`2@W)hpSh*
%mT;MkaV"nc.Ueo1'6re1l;P<T6`q,$/gVlTLl*sH0NBs&X7dqL?ADEt"o&oTq?_c+"4-$XIDqgILDDP'HKac!^-`29#J]NYpTGK-
%/BC]Z?nMJ[URHoEAHsrS5nkIcO<ZW=%s>H7K8cl;k^Xt5!ejs#7<\j,$MJ_`ENs?2h(X]\C("'/BT_e\`X&;?R*`!*9uP<8*AEBc
%!)Z$5UF>tkL6?gQ_SLS.=Wf/cnJCt\)p'KT'"e6OqlZ0=9H\%`1W5uF2AtRh@Hj.Q!.kP0<Gbh3U%!n-"=_[IA.p@b?71gT4^S4B
%LgV@>h8KHKpXg(S<*R)1KQc3k>1,P#Ad_A`V'U(#?'#.t\9<,G07c6b(dTcD0hbkLg"NC@]+MOd8hKGHG;!D&MrMDL%NBJG`m<FK
%ZXFON?W\Pt)\;`#!K0FYP$[=6o2?Bk@1s`=Zh<QAF3m`*%G#a7=I&u-<]oO2=GaUMC1EZU#AdV:-U^f'HicN`JB`@r2]D>;<-2qX
%Me'P\4'"6Uf':CUqKJZo:B.s&2$_:+YA#EJr%"JK$QhYiYC5&UcVU'pWLl1<C"ro"l"<hW5!u=Ah@72fTpo!CW="R012`JpT.)1_
%K"dYCV8nP(C?rH1C;[,><*,Jdoo=<)a%W7XXfdt.e[J]P1JW_P(KN0BY2jGUR[.[)V[!;4Qu*$Q6@uc3b`_+p-'uMn#*%?T(D.X5
%OTE65D:+O\U8T?1`$(t-QV3N<LUZ!I\7`1B9jHGNlY:608(EB_NQH"cAP\m]N$$FG$7Ktdr/KmFCcW/]0UdW&s$36TD50#ZI<-#(
%%49h<YbFr!4V35X9n3Q,X<AFOJ,gE@DtJ,]#IqTB_W+Jhd9"Aa@,!<)$oc4"KWFS7YoT[u/oblH&6HeIk.5s[G=(MY"4u'@`7Vb]
%/f(Re/a3^B\s135%!-F_Do9(TjP(oF5\N1*=`B6*0g]U'MN6%nWaZL%0@3'^,Sk;";ng.bK5jd6QRP6>5m\fmh[(QF/Z?`k+:rEg
%1U^/[1W!B\@CW)W2EjKb?j@3eYUS`h(6GVFLLH\TO"eH/L7plLX%O8]lS_UPd^pm:Zq>#<=&KAJ:7.'8YcC=+)OE?c=</CBb4p_.
%c7j3fYDino$WaNWYUE>t'dbH`qWT0DU99$"^rSC(iV?2S5.^23Lrbk-$R"*<]A.Z3AE*54IP7"i(4?'03<I27#.!JG.bhVK/*IP?
%T)]PK+p5l_[sOpK@BM'B"B"6redlL>=O8AsOoV9#en8Cs`n(k9$m,r;2=q>iES:74IZ?5"PG/KZ/7Nn[jX)P:I<lAfdYk#"*=_Tl
%o9=uhpCOPKo(g32iL2Bd6BL%=TP)00<:RL7AON$4p(f<;nD/oQ4Z\>8lXXeJB$7<#m<Vho9ea]k]dN"]F:WTdkieh_=,LH$!2"qX
%p`[B)XnT38fm*0Q=.c)uHkmY7m-&>4](aGO!QN1AnYhRZW2.lR(b=`i:%[-J__Aid0'/c33cuc2mAde,^+D]u'M:m-a5]O[\?k42
%QlFBQ#9,<9$?TZ;5/lndb(\,_n`b$"3Y"m1htce*EP6Ef'@?UO`>rnWdDRSho^q[nJF^#1[RHhN$sos^Q]h/l?N;[26W%GN2Y!XX
%3kFT9X:TAC*-6cG6TC3cVT\Q"IPb8CFirr!GlCnMQ4@X!$!@d7NI'`CJWD!X*tb6VQY<.NT3E"S$,4ouCg^+9*rsj[!:o9;dP&+-
%!7S@8S]8BBUh6ZCdS>o7FbG(upA11%l2l%tl!Q<]c@Zo`eau0f[+U8]C4gcXLX@OSSf#np%77$Qj[dAT'E1Vm<@X/Qp]<CN?^fe9
%Rnm+rjC,VsX"G\ui_/jjif.-#f5jf2?DQG3G$Vg@!%i?N(kKcu9"4'ik(LB4PtK)g>Z1+#Nd9$)+o"%1ZlOSUg?/!ITL#D00heZ$
%KjFcb/;pH,.JQd[9_B"[`\fd]kZODi3bVZOL2%KdqSB$.frKc"_c!DR)3Vat.uG3i4dh:,]=kb7IXmJ$Jd6Eig"qD(q<*`<X]Xs0
%>-`CJ<=`;h5B*!MaY$<KXX8o8c<Ta.nk:ssQf^<#4)R!Wh+mu*-*$;j](Ih+_5"9pS52X[2H^ssI^*/B[XY0/o<X&_5?lP2)8t/3
%pN5;FA,/K3s6aO2\GFq45L[kQYFFd9636A7!@AJF0eO_)A!3E/l1@miIk&5.6H67H\1U3^,c9%!!2&,JV0rM3T_!-2:6Fc?&D\-H
%!kPoDKVaAp_C-5DnarA+T'aS@f6,1X5n=4pGB]!j\*2ZZEh%^ugt28]b4=*@=6Y4r,"U#)UR14Q,dsPVMi.CN'LThi9EVpPcYSsu
%j;@qr3gbe@6(:X@d64FZhK9jcG1&b]a#V\HNk[EergOt(NF9C2:'N2.h`)I6T^-kXlWJuQ?*`Pn]\Z._k\0t*FFrDIS27Gan4F<c
%)T%tLd4!tc4?S&n%W>a\pm!"pJcsj<d&!q<!<i!kdY//sd'm@&%C9^/;I5.Sld)C#/K^"F[u>X9_8Ypp9O>SMfh.X5D;WbtYjc6.
%^,HbtXm)i5bU^R&goC'Q.)r+"P`U<eYMXX0/mVGQB['+<aQSRDpt,_hkHO2)Isf"55lRdt@10k7?,M5H?jeS*n?"bLj<hP?Wp!bg
%U(,)F%[V;;Zu&:^&TD?g:G6NGrG+mu,igHGWDoRtD`Po>1HEgYr3"XKl'i,:5Frr@]J.eV^NC]JSa\pt`\,Nl>!>#<(bC\B9jl6n
%h2?gZ.s,ZmZ=kh2M`-QUVa<D^jP&O%@[,P%E%6KpON&$Kg>tS[V-eolHngfS4p,j8%V>@'a-c\AC`JJlYeVrnh#fG^;LAo`Jo0Q!
%dIAd6>VF$"/N?=Ncs9J"V<(/I"0'-!#!r2SULTV3geK+kpm=-em)W>JN#CN'/N4!uRGmgaY&QjD?S9\H!Vq*i8u+,OYs#FYmSGm1
%Xp>[<Ai=!.jQ]A_nRbL^[qQhgm=7.2RHN0TXSC.P&AKe/%f"bcKt.E;GDp(JfK.2#%!Y\dQnl2WK$U=X+:dhZpiN8QJedCt/)5@o
%4cb@ZpbbPm7rf8O;*HbCW[EhV-1r:6S?kO-mV'JP37Lo\s6E=2q3J,Nd$'dXJe&9BBJk>7^h!eIpr[[%c4PANI%>FHqL[!Y.b[/8
%pZ&lKA/o/a=h:nZeGnF_\[>P**S^DgJGqpMkXA=m]O)`IiYW(-p4JF"T1i1$A4)WBO\?_mHd?UubdI2j^%59meQ(E<67=@kf%Ooa
%CWqSH@lRYV&Y`s-IQSL#+L9a=Sl)QgrUtU;9't*0FMg'U5uUn_9KPW-/O^O,>I>8SlT!2<07IJJ.@PPL-,,N"lc><S2H_[(L4i+X
%BVB.o&FqoA%u*!+Ji&.-`+/grq`Q$<T@X2=FpomjE;`7$R#2-B/I1F"R1DC7[A-H9YA2h#F7[\)GB)jWMk*brS'G$B\7&$k/;cAe
%^U*[WB32!@]cMIZP1$5!`O7d7Y?Kjq$-[mG<-ED>=DJH<lrH(>9hi2g119e8O.C]"JCN5eaKbO&%7!G_4CQI.pej@XR2KgWQW)[<
%E*XA&&eV=[EN;sI6*9X?Pq^t[d>6:-O`/eJOH1)`,3Hltlu?]j:0BtRLiPF+Pp!J4=1EX\%75bi$:Kbr8NFT2c'CVm-bhL;W'Q9\
%fe/k`$.)0!L%)KmF3\)m8E_i9VMHfANS"#s:rVIK9m%o;k,(J`goIrPMC%^bNEu\J['7oa2d613g"AWf)Q=HZ4UAj*\&$Sgin9!n
%<QLRGWqk**SfA^h+T)s[%WV-.pCZokg!<f9^S#Q)f,V%`TZrd=^]O?H`Ejl<;SCX4_HC]fR)iKFo3q_44[+(N-FMT,dk+cf$KM?*
%Bg.hL;L+XMI6&aX8*2(Ypsk1Ks.,5'(Tg(F_4-I8;<3L=J,iJ-95&pq@'Q;S-eUZe]]a=JlmRH0TB0Wf2i,6=Ydn++:/f],Gc"tq
%!2'6f_jna9Z5&RA(@UGmh-HE6[sbUbSAa$*b%i_jQ[+bG*q$FfAsG_ec=9rU-F*GmH=Rd#8E<V4fEm2+OtW#,Bm0Bbek7'[jWS*=
%;N0@QfbuI!D;NM;F>!dBYZe!a$8%aX:F,8F#APaZ?_jGqI6^;t6t=p@j:%2^Sjm-3>&H\"gdhZqc$,0jc:=Qb7"p!dm8'Q:.]!$H
%QQJ82iU[T52!IsF!kRjbChj'G@au?;k$/@o&J+(u#I2:7l,0o-bj3hoUib6?+Xm!$n5ZOOk1SbA*<2tb55X1DJh:SBQBWt-lc&G1
%eBYs)XUM,T]M"F'^s3\LmHg$nE%!N_1""-qYG\5QcJC5*8*4cU_gf+Z;HUV"-0f0ukW)kLe`,%!cpia=KMf'fW_Ma92+U*U50B,a
%;CdsW4,rFH`dc"ZpADX9kH(CV7:IdlEU:ieR<0Ba0MWM2#%gMTaYl(Bh1!G?mhifA!FB_Q&L!=:/p[=*-hB0<=P7/H+,BHS<!G"o
%]dEK^IIung#aBCZ.2d?+;pQM1ZMC\RoX<Ici;:d^JNo:t>Fk<Df=,T-Dh$0@92?XOHK<Vc5IP*M+(R>a;+Dpkpe?!PHElU[1EN&@
%ZM!j2e56I%Q#EU,r1a"r*3kg80o^u7jR\(jnr>F=;FqK>FRG?D#a6#jMk(irO!c<U>[.WAd2'XK,7iQ.n\*to<N+6UZfdm$5*'&7
%(Bcn7j4T.,#9H[Qs2i$N=\#<.^+J@AeRr0gespY<l^DteZS[NtC]2N%]&bj(aZs[Nds&J]1Gk=?5liuOUW^BfLM4+-qROj?5P;_c
%hPJoTe1MefZMC\Rga@)#=!CiDmc'?4Aug9nmP_]UoV/6V:EO\)jOLa>Y3$ft\8S_<-#:c7RsljOkg*\['RAAK.J0f.rQ\]p/Aag5
%"1<k.NkA+BWiA)YQkiL^SQ`Wk0p)jtP\q`Qm#V8Z&J32Yc$^B&NDb*?CY*96G(jO-,2OKZ)g>5LZpl68]kafq'Bt6GX7&1"Z]XF[
%?fpk2en&f$24]Y&aagPQa*"(2il+Y?'Drpf]*s)!M)=aKC\)Yd?,spV<7tl;7-aio*g]IHnTPV^)Slp:(qXMp@\YJmST6H!S!IcC
%[CYoU'^3(1!jKm",(LW`HR>?_hu,CgHLXA6@%GG:ifYg!__It:.H_[nO63PXaXc_aB,*F[%c8J]\F.0TT+Ogj=TiS64&.<.>),89
%ZO=XTgZcl[b?1/PMh?TD/&2i&3+`Ro(521^FDBB8Bl.+>pbr;['FJTZ_UMpdLt\JO2+deS)-jjF4)WmL[HAXK=qTYtE9ajbPfT"'
%K.p*"Qa14Z,ff0e?tX`?SR$dm2d57FQ+O+uf9`(36#j(TT86,t5H#$C`-h=kF3e9(KG>MbcEA`)MQZ1S,DK^*Bg8&M8XIS%FC#H]
%]rWgJlsU47dsgh^DUJYL?>a+op&uS8ek!IDWD<XAh\$C,[S43Sf%3K_bF5uI7*tIh=Dt*GLq>F\Utmb=4d:pdA0USQkMD&gUsLG^
%G5T-Y`$N$!TH]K(7bGpUmBI4&_OHi9SqN^D5U,%hnAHU/+l\suFC?btF,e#=QWiiET^Y,=&cNoS/;]`O`#6Z!nZ[3GFQUroeCJdn
%4e0dV@Pbp76mf<;>NL+Y+ikA5"HkE:=R'd8h.uhk_17\CG&F3K<dRm<CdsW:5UN[`?CNW4MsrCV1l[l/0TqYXgKBX0%oisM/?Wc&
%>ScQR)-7KuC;+X=?<tNh0RBhrZ*'6Lg!m'8H;6[Qj:8#IeX1Dd:(8D*=./)PW[C\tSPlFV?2kh/=+1,JnX+6H`9:ndoF#-B@r4Nc
%0@u+JEYu^r3;I'4H.VTu2Q-TR5<P1_+KS_j=;3;*HhV?R3k!8#_!(&l'P`d8OL0)\&=V$oFc/h@&*WME31$atpDAR3<@H(t!i&C8
%J!S9ZE%fed10UKE]oM&=]QkWu$3UaPh']UTm"EOb,/=J^kep)hY=KX3Ud=i6qR&k3=%nh0TDMTT(L;VH?Iinreif&7]>8'j(3/H]
%WA,7=3jWP6R;mLb`=aP7.+`rRKC]:"%f(s*L$2Jo7,&P&"&S"m5SWU'.,)NP.0Mr)8Saq>W33oETSANK?k-e=$9:^Xbhl,;?.GIU
%>F!f"A?Cb8Ob^B_+^p(,r*&4nOTZa.OmMoQIf?`^#fbR_`Bm=NRN=u9NSTl@TEL.5T6BNKp=`\mqI([/]%R4j;0FT#feK_`oEcm?
%oY&@<aHA.RI%qQ$c0R,ligPe/Rc[E*/RCM<==VoY1^kKid+F^"!eoWD@r2rrJg8rQI:rbVG&it4J?Qqn"i`FTf`JLR9u#eXa](]p
%>>u&Bc,i"1OmTB0J,!2DO6ku$Z]hXG[-<!&W)mRA7H):b1I]I?1J+,A>mLO>[KdRmI]"&H<fSc*WN"2_gIWpbRj<DUZ6EkgiM`bm
%)Fl"FPEKcs@]@%u0kO\"ihJkn,V2ou?Zfn,6+,3YD*sZoMQ-"o;Q3glaWsqkJ#![_dV,ZG'Salp,5T>`c4`q,/N7\0f=k[o]rL%I
%.SnG.C7m+*`/YL]Jmu*AX44q*_u^8gNV,/f?p?@j=BAM<,6toB1U>$s6P,/(@_358&m<1In#F$j;Erg]`GeC?nAqUBHIfM?"RfMA
%YDfR#LRW5ZiUMX5&7iI(_>3/2SM:j.TD-a&g:*2Zeeu6_$N#SOPO0ipBoud_7:3F[J=677g3"ZZQYllBZA-o'C&rRW,XBQe&f@#I
%2kTst[EB3u%hBkq?I3AP4ok\B/qas,F)<)VAias'Jjj:a^8T%\p827ej`#,a)d7(Q1S"_o2XAn7T4l*NRaWp*_O%*.n$a;Ld-N.A
%j]U5H#?4N_B-9;(bm-<]GJQ7qO`n<j*FoNqENoJjNeobVmq_)0;_!C:aK[)_83^:A-dagX)5$9ZA(g:0RQ!l_o&/_%-3tNLUaUa(
%eO?Kf8!7be/k\*gWc%0^I\.=gh\d)Jb]c"[rPp:VT]I<19(;1:.<&Ic?#+Ocq`7"T$P-EWSu&u>*J2l$N>$h#2pR"A9&h<fb>4ah
%'ndMXJbD%_p0ETbjK>6Z#9R"%D;&[AJDT2:Kh2<ee&+qHrL5mLAk'jo`FaN\.o3';3;r&!.CuuqDB$p9arbg*SWB@XhElhR.X:h:
%]sE*$:?Cs0)Ph<YW->+9ZW<>fi*B+Ab*p@LMYW`9RL;j&F4O$(=@rIr+f'pXO2=.[B,0'*VF&'iXFKI.Nc;A/3OI!APB%%UY<W@!
%4>`c/"7cqt//83BA?[OpA+?Y<W-[M4$OK`V=Q6sYO*m[;>$aj<HfMY8f'-A-#(Gq.Jhb,K`^+bFYmURWnHp;LVp>(009"HA;N@DL
%DrH/G[K6,si]hA1`sp'&6,_H1fpI!/+1FuDZ[:!.OTU)VkbUGE8>)WJs6MX\.&Xc9fnIJESK<"DCYrapHl'mX^$Y4Bc3(Qe#g9qR
%$4MN[F?BAJR/m]Ab^esQ>&Jifr=#&I$f<W=rR(uj+>?bOk%oVj`m]luL;NYqA)85qbf'^]Zm<nSlO!])QVZA5oD*Ye*YW9Qlnn$g
%+2+&5a4m.jG^S0.C%o@7T@<CU0g49u+n>H!Sl7[*+eI$*PAO)C3?F?/fQ1qJRe63N3N;TbN:h9qj8=6&,WD5?aN<Mlkk(6*f1s)(
%2CD9RFh6r7R,_'<54>*Wo(Oj^K8kZTG="Jko(IqHBTHJ/Rpn8#][%BpZD+0F"X[ht;%O44c;R\u-(gSh)Bb\c0fp?kWWHkrZ_s?F
%qc?!ckfU"nd"[!nH<QR$<>oL7H^L$#g[B?tnFR=5j0$/jGD+lu91sm&>>.TP6TcVPqILKr@8ia$TmZ4EIoR'3Mi7?90*NRM"C,:S
%QIFgN,DLq>5d82]U_qsgI$c8jA/6'G,T&]O"`h_PC.Z_G=,WoPaZT30jkl451ITQ8cBpNIaDjYX8uBESBj*85(5t+RKdkP=`Fa6L
%7_+?M3tN,Q7oe[OpZT[;g>U\erJA[D.@TOE%`-'_f<+QkD!28j/'-]a"'bkpiGC`DWPFLe4U6n7\;%?/0gj5XVJ;BPKJlKF)roBn
%.dbU5eLb>?(X`ea\.#6JqC3u"0N#'Bk781.TU)W.%%:Va<XVI!EA\^!Q)H_[Q8+@!h23oAE&*^3"^n%,Nu1)hXpdtiNu%OMZMY\I
%\km[8cJR$\5(\sn@/6:.ogM6J5"DJ]8;&d"-j:q<9a5pq+VBP1`RE8I8i@k<M'Z_CRY6p1Qmm50TRnH9`s?3I&Uo+eGi4,]Y6O./
%L)5(sL0+$T6m\!IBFE'Shj#nDpBD=2Q"h%1[ucfeme>noD8'7cfC2OmfLQ+^L)5,YMn2T:R:&qP4g)o:('2oac$@YpU\^hl3]1-[
%Fi#[=LhLo=_:jo5R6c')grJkE(E8l48=r3#ZpR_2/T<<fP5+:`TX,sNN/708KI-)(h_uAa_GT,Ib[HYm"L_H@3k,C-;2[UR40:eF
%Sgmm'$@9,d_$]4Yq,Dp%W`]t]ZNCh?BjV`T6fa0W5fiN3_ZYWmaT6K>n=ADg8b-n6[-!jH?^*5[4UJgmZjllC8r&RP+A't6^eu4!
%lTHV;V,uLICB0jLl@a3t.V-l1Fh)OsF!d0\LJU[%f\O++s4`&\S[O_7boj5CdrScR9F4u/gl=gX/l\a3OQJ(rl<!8#%8<8aBe^q^
%@Ge(=B!<"H=GIS2PT9NWnI%Ua$fJjB-p8?0Y+,bd!CRlqTFaXr3el"(:9O%'O5rq>K#;<KAB_pTar9'S,F%W!^@-orfD;B;HXAXi
%q\i'b5.O(JN3:!3.@@^l]?52./SgTR8S%Xu2:&9lWMl!`3@'XShGtN3O<JOXWs,nmD7]]cY4uc-,\R9R6Ih;\/3DEWY_7_]Z^j[Q
%j[aX?kSZFH@87)Ub2)aF5<;m&,W#.!^:`'04Af)Y4@#(+!&a`AbM737!3B;6GhJ?$#,9t,'ap4Kfilu_ZK,IGZeCC;'J-&@f;<I%
%;%;FcTec5rDRAWe1);:t5.GU"D,;_-F>hQ#VDE7WZ:M?GbunaBI^HLGa(T-e**$8k%R,Q?JPHLUA[7jASY!C\X"O4WhmAhA+m1p2
%0MSe%-M<b=n]M@K!`K,g#jtB7I'=UW3^IrjY`"=^^rLRJ>8N`*C#rn7]c/H5a(uC$U:$S%[cf?A1EFjn#UPt:?G;ls;M`Xgdi=?[
%J<U1JKsj"='CM31&+rmXXKf$TBl4ct&%?!TLglJ,i\"[5I#>RGp2NC4@G470*W*@>K&l>jM=U^7LimAMYfPd?H;Y6jpUQ<BA:^g5
%YG_frC_>Yn04<0XA#[0T/=Y&/aO]B@.O6_Vid<TMdP-q?TYWms0"JS8pQ$r2DmB7(]tgeR']?/A=9nJR<#u?Z82qZtL>`*pJ"1A5
%@QI?FF0KXeKVO?,XNN"7+dTW$.k%6:#nR1i/T,d)l2fZl-6#ALL1Nn6PuS.k4C&SGN-J<#*E6;J#q,UBOh[!-[SX&h;Gp#^W$fKd
%f)*2+Ei]]]"a_WY!`D/=Z7c/*8C4B1V(qo"1m*3AB,Lc;dBkp8NtIStFgF3Xf:f&&JUHX/bo3_[hOrJjD(j\AKW0[;q>*Vj[m:Oc
%1OQTJ^Gd.*Yr.V1Vg+u1c(IgaV2o'f7SiAgfq$\Z>$G&=Pd>=5U:=:glt1$AYhL;sg-C-e_W@_Q;6/H7ff4mgL]hXrIS\,!=Ru)'
%+j6k>Q8Pq&A.9HW<;q<4mIJg+g*\uZ[4G'0o41@SN[F#smd1?7+r`U!#5,CR2W]?Fdnk&_:"sE:Bc2*I*%)l]SAU%;Vsm36-eN>U
%2YV1BGZm%s!u[<8B51JSqh<L7!,9jlC;ZCSUdm7^Zj8r+LmF)l7Cm/sf3p9t#H%%0!0PtMV\M[Y0lt/1Q[PuFFA!khEd.9W3]_=q
%=p8ANncs`4FQn,64V$)2XtiUR%SPBP'4692j]&?&J1<*]*!:F'gGTsd[S_IiaMUQ*P)j[jXRgs*D*[]r?^uHYOYp_)mgq9TRgr<b
%XA8>@-(9Q"-<L,")e]]R/+[\e7FnH$<Ns[>62E!BX.5X33[glb;)4rI-)q-345+8f.Y+0s;@O)9FS26-1%-'Vb32Z5/]!=PJuD'T
%'f=G5B`3ZAn8-(g_(\L2Zd#Y,2OJkraK0YG(Yl?34&4-OqN9!4Sa^NCf3X)QF`a9<'h6^`P\C8]!X;cDQ7\N5gSYudHk[h(Fgn3j
%]#7Z/'rkM&YN3`QG%9&X+ISIn%=Yhg6fYmYPb@TJ:b9O`F#d\s.;D-LNN.d>^n>S+RaEVl\f>"`YK)AG00h6d*T8`>+G;u9+5n%?
%B>k\=[0,1"?4\_@FHhpP>Ui0;Hd^X*XHrDI'Apg-pc]<F]^<%h0mI:*FtWHg-V#u0K"'2P?^Q_%<AH`c3Qh2(DqEfpmH!J(f>"eb
%gA(Y-RP0XVj'H@:3Z)tO='GijM6rI,rkkn?#&LANrqrIN>s`T#Oh[As:oDTT_+#oQ]](9+@m[`c0[^!&cXdnHT,@jt?qs&HBtj2!
%mRpBT_`$_ApG*IGE1$r>6j5j=Z"<+ZkJ(?9^:FVP3tP;t<tN!O/9/7&JsYZ@`(=@+cd?p4.*-D055W-FY(>J>%0RgE^lNuu,++;M
%R=5s1i#>Sq^u@s+%VI&.`)_\JA%/JX<P(:C<$LFj3\38aM]k#K&88^Z3/VOj84$0(8_i^cHfUBhT)Q55)c<H6UcX@kh&3W*G>`3t
%(W@k0f95)="dr79e]Et6,`a*_A4eh\oB,+TrB3rB9#!gB`su8<5OiVI_MSAe=:B8fT^^X\>,dn+o;p=LKd/+c7nnu8?3WM(0E?pI
%eJGGT%X$I9i_UCgY_s@UAtWG'Nl/3qgJSCXHem7U;k"dQ/>F6*jIKbZE?=A;5XJc<5G_Q5=+*l72PE=5UTb6<kUt/&Pfk[,`puYL
%%6lQ`%b1ZQ8nF=V29`8V95cP!$3>;$c\Y0$g-D!R%KV2XeeZ0qFp3bCp]_+(Y,8EIidjla*r>"!$DQjs.&YCCkg%JHQIllB<P(-$
%rPN%U("Or'bTa=mh#XtD^$W_\3SH#8**-nU/<1pJa;D*08t$WX@27>Z[#3oE7>[TeHp*J]1_)kQ?n+O\Q78>uZ&7n-@N_#=)uq<q
%_1aMM-nIYf5fa$%=Ee3V,mn&g-t-u1-;:#Jgcu@t<L),=\%@iqVRUho@'CTB4,l"CdO5D(GAe4h'f$:'O/-,"S;!gh8)iSqg#lSB
%>GlHtca!+YjJUFkY+)Ml=GsHba(d>r(fdHbM(U*D9SWEFBZ-n+_d\o]5sM\f"Z%%n>CSI)ZFcRI22bFHpMh;MZRU>Y;,>B`F#Z9q
%KrFNOKb]paqHC"I)'LIO7Oo1lW%\`t9Z?-[a]>TkBjE5X4KR4h,:;IUq62=_/=d&3$Z6t.\Fr<#q09bqeIBG=4em+-c*$;feV<c#
%8Mr&H#b9Q:4Z-E-l,N(8QBp"u*T<N*..lXMPP`?qQEq2*8Pke^;NTX"ON:$N2%9Q0,YJf,gUgL!T0PIu7gFGkGkK1aB=2DB<RQ<3
%lem?jkeel;^U7o!-9%SoW\8#3[jTQ=Oi+,VH),Bn3^i>BUP-LR8!P_^7)NshgU6_'"/#S`<b9_Idad?_\iRj1AQ[!9UXoJk'Tic$
%L0g.!-,s,X2.9$dPWC!gePT$M1,CLdOPGmK=e,?Da#uKb7FIaffDW3=OqH&:`2EQI3$I1!K!J^o#?loKgdh'dL`Eg7JA,0GKtF"6
%l2=cQHgR["e#h2GoE:WHhUV8%LVis\-dGemM@2rl\(j^&:/9=^@6Xn\U,]qh@ol_aX,Za0L[d.t,&n%)[p*W*&\#[kgH;)KrSCD+
%!ER@))E4a'd(0"dn?oe89aPO3A)fCJ+49>!n]S#s_%K8gAU=t1NsD,[b4T5[$O4QN%[PorGpR<,MuoEC%Ii3iW[>R>X+g5sbAEG^
%r4.q>QYaNXduO#ACnSd[g4'D(FRrIa#mB7=2aaLFo6ISocQq\%'<GJ[l`5k7)VK0T1Kcf:iTUrQ9O5ktI*-fJ\"rCp<@D).B'I&O
%CEGB1rq(+^3g'A4$e+ErI=ebE[m_Z`qq8%Q"S0ZlWV*hSS/r<K8a9;LQArIo',Yh6jD`30l<E#Fd?^0I02*AAJ8ZbT/*MVc@pNm`
%?gt`f\si]3]+&B56?SGW6rG`T=u6Ld"'jaAWc4,(LZ/[k+G=E1)4Nl:9gOjg`&bkTXa*R'6'!FX#dDO;gt,-sBh4'!R]L_>:(>+C
%aDonA.!b),?EbbT1=k\]@@*;oM>D_5[=G-;WCAfqn1U"#,9_3LM0SJnDi64V2E?uhQZ6leb^AB7S\HAI.Y<Na10)olV,)lfG1YSO
%s0,]R#bOSs2^[r%*m7Ao/_5aJ;,4[8f6&5iT;*o`Y'DkrjIs)[hOpm)6QjljDqUmqIZ^>-dCs3j(=1S8@<Ao)6JdW73=2i%3XDp7
%:T^TW]s8kV+,,Zek%u'GD[1^>k^2NP4cIcAkXYLs+.f2Cjb8:a0cV`68mA1:q::)@9A3^EU]-=E^q.^E)*4Af3kH^$=n[fcf8>Wm
%'pnIBe)KjCPs3PBNoFO61OJ1_OqP[Y*sM5,:Y)_Elt`qfm0o%4>ur0c?Se!8)\'P'CHq=@)W7,R3<oBPOqDKfI#=_BNK]T$p4DXL
%e1`=\o"[#)klRQKDV'H6nma9QSX*RSU1Ui0#U?t,F;\8kA/=.TZQm=NH;l@'J*GqOnlT,R&h9Rg`m$Q\HHSttPoEHmAAk1CrU"=-
%Q`hk?%n\cc6u=#DJa[A7PX#-XU&psC4$BD:I9QpT"h4ElFPs"II9?RH[Q<n2BY870"MY_FqS3JF,T)X*I$P?A$blGGUBJp&R't)]
%^baGGdO:3GArVV^IP>P]XgYa1WbE22/qI-5na_ea?7Pt]PpcdP)N-<Fb8Y(ak;t2qD]m)k'(Z#DqPrk]-pB/Crq"jS.NBRb7Rc0d
%aB1F*&;0A].b<'_MeXUg#:>;&J[(4Q)U`&1Fp1DlSk!Mg\8:_@+3i80@$P73K?.^-]N>#uf!Qg/Z`;:C.c?q[R])A(>/6V!NE??o
%H=ok''7n0`?HO,AgV)'iabNe"-",-S^)P*hd&ICY$5$F9GW$T,%M<8L8<Q:tn8rnJV*l+[c616jhg:nrE3dljD\T$knjnlqMq+)W
%Q&afQMZ]F[A)"t4WJe&'A\Y090a*h%=8NDj*![0e<HqOYKsc8If8P*hi\TSJ.e)jWo7`87(KG%FiW*S&\dq^sP<+,R:]aUNhqW6r
%J"LfFN=g;>G4n:K9"mL'Wk@t1<Q"\&-G"0;&H`&N%<"k2J1Duk[a@6'_Ao:t8ee'%.YW^IqM8B(Z>iQ@5d09pY-YV!jTZGEo(JD;
%-fOVlAh8fMMC4Tp&M%`U$:rGlCQ&Z62sAm=0@Fq7R6d`?ABO8[-8+5`q*?E_W-0<iBi,F.4TJiGWlOC`Os-V7V7XDcO[Fn*LpjoF
%UE[Oe/unKF6Gaupk@T+?pDWQNN-qU?Oo;.0i;,.t-9fHR'VB4`s#;W=R,^K!k5cCgfsgn1>X4.0Q\PdfRs9J0DS'iI!SVpLL'NN:
%A"+#)MYCAkB7KQWk5rBS=e]4LA;eDb>RQ\B&h$h#2^qaDkC8W<A[*M=ccT:-AVR6dHd\$R46S*iDN:L#WE'0);0GVC_n,j;:LCi>
%^03bphEFSG6R>l[I?H5YHtckn=cG&--UiYgX+Ud[9j3n+>&Mg_E)]e[\hL)L.pGZ3H>.sK3&lQ=RC*\DWE+X)>#jEI%[lU+dp[4i
%e"^/sdFnEW_Tkf<J*7P7oe0BoS]\qkp461T[j"s;i@a#=cl5Sm+3ZdA/OZ?NcsPa&AO4[e#-aGU)A/MsFb&"5.Bscq"`*.?KS[m;
%IP)thYte/*(mQrj097%S+Y],0?[7V[)/DpJ;DnO.JKdUOQ@kL4]::Ef67aT9i0dh(:o:$a=MFdeO6`qqP&O1pc49+D9+ZUSe!`#1
%6n20@MCF`Qdea5!i]((bS5_@5O<2l9;sF?_NZ<m^"A1LkHq`&TAb@$B_XN288#fXsk:kB!Z<P-5?:R1(p&-X^$BCcM%O+ECl1kkL
%d*5#8$Z@^YfVgh5IAY"\S'!60<o5D.G8h:Vkj&R)9-Q(D/1^"(Z(7tF@EO4LR6J#Y'?b$hk4^hGro-;aHt^T"Q0c#P6TgF)VF55k
%Z4BCE:DrjS3/jQo(^I3<,`M#J2L)Tshln0fH=D;Oji!nA=\!%fGWa-PZ`$S0$Bn&nSrJ+i)R>co-$GV(3h?B."\VSN-lI&22_=jE
%XXKWHRXu_kd`VFck/TV'T(q#6I=Fi`r)K&9!E-5Wg)8PBga[bGpuP@:ct-4FCamP+()c@OHP]!aqhu&_]DJ^u!p(l=k5DYbP_Y\(
%%%&Ia)jWn,qVi;MrsSRl(p2lI2HX#cdK4)RFbJ(q2U?4$m+*9Z^43D47P.dDOl]?_d[Gp&d=nC[,Nr)I@5I"r/nmb9,9'ol#FfTI
%hXdcHIe+;HKD,2*`%lU[b1,<;<-3`D/d7K_P_@^j9EpQue-4^HA@\M0+GE7_JkGfq=]:Cf%G35LUes'?-=:^5`KN!d%_6%cfo>="
%P.%Bl#XP7;%qeYLQP.Z4@e<9?U-Kk`e4'3\\==`;_B6^W_M_C4UAA'+69<u5#.'Js,_-)05Zq&[9d)Qo[TbOdEF4Ta22-:*6X[.V
%NQhZ;,4Ho9Q\\0&46)&7ioijCTt:$mR5<pslmJgTJR^17q"L]K'jF/plj[-R+uZ1\(u?-!_9C'q]fRs5*>aX/enrYI"V^:HH#I%!
%MtbP`q>8#CAr=KGY_geEL1,g@b"`4Q"c(-c#tA,'4dhCt#FT)T@#[k=lA(kTrU<3]Dn/8O._cFUpe+e"Gm.[,-P.8Ar4TNr#h(JC
%8LAmq]E6b"m;(k=.UL_gCrsKrn@G(]raR$eLTIpXY6S%AU&&81&$<gbMt;jgOl3B#n>jS]<RH7LprFT;bKQt9ZZdC1dh5qHR24tb
%S$f\!YRsmV^kFdq\Te;;hOG02.,#1D_[ON2Z9b>^=)[ltSCn5Ob71$=f!TnMHJ]1OR-lW]jJYM]c`=N]l>DOQ,l*4o!4nsCV4;!C
%i704M/O9BC3<Qj99r>1HJSb`B'A[AGpgH)!ZPMS1\EI%H.lb#3@Y=?/nHa^g63PJiZ%<SM"mMl//YWrK$"FIdA1k8FLX?b5imHQD
%&5<`T)C_:V!hgH(%T)3&PW*nS-tmW^;ZB,"boe!O2FU+r.X[.(fl&_0'1^j`J@g?UPg_=rM4sq=nYb?s,:A\cq]r4._=(BDTbUZZ
%*-O@G=0,#%pj9tS3$UHaj,.XWms_c.Dg20I@<2>CO*Vc^$iZ&ZEg;I$S<e79aR4Ga&Y45gjC#D2]h$Ob_s`\&r*]8CVmaf;!Y4P0
%V`qN6LUCp+(J5f6^;/81ZD)-Xq8E$&&OK;W$Vkrg.\Y(5O_^kjlgdH*o[LB%3m(D<?RLV+gmg[^fVN$o;$JS/?60QuU)dJsX3cu,
%qD9?;bbPf:%6nQQ!j/.E&d*nCJ`bTQae%^6[&9?TW[obXIU%o;gbC8l^gp#II0?TXJG%@#-=X28JRdae];YJjQ>S67%(_sUlrlpf
%R8uDsl)C_=]9s6J=f-)(:R@rEp*CG[Nb?MU$dI_TLIu6S<:bu+dV=AO2O0N`CA14Gs6G("CIMtmW3cI?P$Y*W-CJWooSO?t64o(]
%Krd?:^<9(k3t*to1k4F&&D+AZ&QJgNVb(I'3Rr"VT:=iu/SEWFAi1kPX?'?Vo)6\6CVo1BdX`:bQ7V*B[\Qj_6YVHb3GS$bcfY8?
%f(jdpLYFlI="X*LGkRo2gY6L$Prgk7DOk04mVO9tlcDchJlOMi`**.rkMhpuVTn6kHcm<ZV%7N$-C;SRSq.`LOO,%Hps$b\).gru
%-hS^]GF'THC9:AZ1mmX2W5=?$^87gm:0-D]A\ld7ljL5EM0'J2g;b24)7OH_/JlSs/[!W:Q'ML+AP_lSM!VgW`P(Zc8L>"T=6Qku
%0iG['[._iefr<X;[Au+\&aXKW/3q/3mC:lceoC2,@[**W-Ug^<<'BQ5X8Y0c[";aL^4*W<8+5l[R)Z/h4Z&.7(Fu7Wh-n+KjChti
%/;UT*#p=bJ61I3jkaCH0K&t,Ml\7upl5135_Pm5j7EbrdeLKn<!3F(&5%tMsV)jC"WLLl%A:BZ%(4E/N`Nj!NY?U!X;!J3"20=-\
%kYR.+"OKLK]VnPiLpHce7`>6ip9CbmfXn\ml=W$oce2?&`=e>4Y:8rG*n.+78d]Wl"d6kJ'a.E/7Xq^(AQr]#d5@a=g#Ce03@snV
%ReW0P,RTEO`RLr7'_1,RiLtk+G0hO,A1#q=-$$1QNI=SpeAd?69`QNP9Y7qlXm!_Q@#P`@<1?T?RM27:]TUO)rb0?b/j2pf36NM4
%'2;=)\P2VtMf@f)fjsXmV4iXKarTZ`W8gG])0:sPW-/5TH2<u6?E>K;Z1d/6FIFY)q+*b>[4bO5]9I<u]`$2@Wj2%;d&<i"&5-eQ
%P#e2)dVjn.7U=EN3Yj$%jL.Gfgse98h*RKj,"XPT[FG@09P."I?TEVPj!YZ<Mc"RNfH*2)I0l5g??/]\RB+c=L'O1nE\+L`eNP-Q
%E.TB[=X]^MX&_+GMN8Oo8/gRqcDr]1`0IiX+aOkH)!l]&K2c!O(7jZ%%7oTN-or>C:)R'(,Y@cI"N]%$faG!a@a7j3]I&4S!Cp01
%,%QCleC>@!M1Zih>eb2@3K^OAObDiSFE3Nb9Z<!cA"O5Z_@e:2-LW=r-4K-HFuPQbN.BUsGu?rDZGZd,8=>KOf7].[bE@/eGM27P
%].+'UL9[OuH\8J4!h"Sg%p6I/e#:/nA(Fs;g3lRl.56m\M_PQohanMAf8A(l$d>fB(6$b"UUX%3&H13=q%S$%bc;As?k4@;m.?ag
%?_Hd`ZeXd)kF0(!`cu.3HU=YnSn&@t=GK%2AYS$46Nsp!>lrhuh"frO'9f=&:l+Z1fhSY0@^a"-XC/Uk30t\q?hO9mDaDQi)pnF.
%4)5Y2(>d^)&KpX`$KQ*"/1/'["TZ:.,2XhBF_9J=#qb!a['WZZCEKB/X,-AkOAVUi&pd3kckNls?/$8c4B#D7k1chZ#^%J9EOE&K
%HB@/Wl.l0IXoM!/GK0^]2\c:J/_IKfju@VIP<H%!_mHId@Y$3s(F'ZdWa%$R%>gQQD7S:r]36]lYA?G4'TWhA71RPif:$<D\;nab
%G/hTH)2i&6ZrB)!GL8-]=Uo?R@hU.OI-[RMH'AC0k[rc,lPHrZ84b%QgB8b'Vq#47Mr!#_)Npb@YKKC5Ga"1hR::.eWnPm-D]TF,
%$0QH]m#0X!f;C^B+Y<RH=uV8K?]9!B,e&YJ/6'_[hpr+oI'i[K.S[=Wld-3f=+Jo!(sOh/gLT?@Ui^j#WX%#*P6c(Bfk.o;Z'PRi
%q2'mYKAX(u=tZ2B]9YD39qIXU/B66;a]G-I.DAE&p958p)&>U["h#(<96iig)\0IDBHm"4Z2qjl13[.&3KX*KDJhg:FpKXj:Bss.
%m<g5slrXa]@F#TQ^MpjFR]:g`%\2_X(?LN)=NeNqWA]3l)<WUVDPJKdZKirh197YjA"B;q5^)O(re7MrERfs(5EL&Jg[H=Dp&[`G
%.#;+umsc#k/YN&tC<US5BV0dpD[f,cYRihNY6LbMIbT;6-s@88ANg5V^1<(Ip,@IY&FGaPG+RQ8jmaQ"(.?J7G73ct<1@;/fd?JV
%Zn):b28a$H:iK'YmTgo6Poh_Z]eUlm8S!#Cg\B-TrkZJ=Q;N]-`#WU5-SeVVG"M@r-os(UZ[Wl+5VJME:93,fo+?E.QK$`>GF*Dq
%Y8s3u*.<I:(KZn&N&c4='8//?Sb?)?.!J(AQG7(Ua1q;\=Y1e=T<Ua3P;<'=[Bo/UdJg,+-,/.&]Z08N[-"2h,9;cP9=O8c:[]7F
%h>R(t\BW;(nG1r`ro4phs5?2os7*:Bq4AaXqYSTgIJ7UsrqKiMqX`&5mB8bQn$O\FiEuT^\"A-Fq<k/qr.XP3kPqmfYId%!p#j*g
%hgb[lcZam9?iU-*Y]/'2_]SpRYQ*]KrS_,_5D1<tDu~>
%AI9_PrivateDataEnd
